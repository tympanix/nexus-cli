{
  "swagger" : "2.0",
  "info" : {
    "version" : "3.84.1-01",
    "title" : "Nexus Repository Manager REST API"
  },
  "basePath" : "/service/rest/",
  "tags" : [ {
    "name" : "assets"
  }, {
    "name" : "components"
  }, {
    "name" : "Security management: privileges"
  }, {
    "name" : "Repository Management"
  }, {
    "name" : "Routing rules"
  }, {
    "name" : "Search"
  }, {
    "name" : "Content selectors"
  }, {
    "name" : "Tasks"
  }, {
    "name" : "Security management: users"
  }, {
    "name" : "Security management: roles"
  }, {
    "name" : "Script"
  }, {
    "name" : "Security management: LDAP"
  }, {
    "name" : "Status"
  }, {
    "name" : "System: Nodes"
  }, {
    "name" : "Formats"
  }, {
    "name" : "Security management: JWT"
  }, {
    "name" : "Security management: api keys principals encryption"
  }, {
    "name" : "Community Edition Eula"
  }, {
    "name" : "Security Management: Anonymous Access"
  }, {
    "name" : "Security management"
  }, {
    "name" : "Security management: secrets encryption"
  }, {
    "name" : "Security management: realms"
  }, {
    "name" : "Support"
  }, {
    "name" : "Blob store"
  }, {
    "name" : "Email"
  }, {
    "name" : "Read-only"
  }, {
    "name" : "Lifecycle"
  }, {
    "name" : "Manage Sonatype Repository Firewall configuration"
  }, {
    "name" : "Cleanup policies"
  }, {
    "name" : "Reconcile Plan"
  }, {
    "name" : "Security: Atlassian Crowd"
  }, {
    "name" : "Database Upgrade"
  }, {
    "name" : "Product licensing"
  }, {
    "name" : "Data Store"
  }, {
    "name" : "Security management: SAML"
  }, {
    "name" : "Staging"
  }, {
    "name" : "Tags"
  }, {
    "name" : "Security management: user tokens"
  }, {
    "name" : "Azure blob store"
  }, {
    "name" : "Malicious Risk On Disk"
  }, {
    "name" : "Capabilities"
  }, {
    "name" : "Monthly Metrics"
  }, {
    "name" : "Manage Sonatype HTTP System Settings"
  }, {
    "name" : "Security: certificates"
  } ],
  "paths" : {
    "/v1/assets" : {
      "get" : {
        "tags" : [ "assets" ],
        "summary" : "List assets",
        "description" : "",
        "operationId" : "getAssets",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "continuationToken",
          "in" : "query",
          "description" : "A token returned by a prior request. If present, the next page of results are returned",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repository",
          "in" : "query",
          "description" : "Repository from which you would like to retrieve assets.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageAssetXO"
            }
          },
          "403" : {
            "description" : "Insufficient permissions to list assets"
          },
          "422" : {
            "description" : "Parameter 'repository' is required"
          }
        }
      }
    },
    "/v1/assets/{id}" : {
      "get" : {
        "tags" : [ "assets" ],
        "summary" : "Get a single asset",
        "description" : "",
        "operationId" : "getAssetById",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the asset to get",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AssetXO"
            }
          },
          "403" : {
            "description" : "Insufficient permissions to get asset"
          },
          "404" : {
            "description" : "Asset not found"
          },
          "422" : {
            "description" : "Malformed ID"
          }
        }
      },
      "delete" : {
        "tags" : [ "assets" ],
        "summary" : "Delete a single asset",
        "description" : "",
        "operationId" : "deleteAsset",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the asset to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Asset was successfully deleted"
          },
          "403" : {
            "description" : "Insufficient permissions to delete asset"
          },
          "404" : {
            "description" : "Asset not found"
          },
          "422" : {
            "description" : "Malformed ID"
          }
        }
      }
    },
    "/v1/components" : {
      "get" : {
        "tags" : [ "components" ],
        "summary" : "List components",
        "description" : "",
        "operationId" : "getComponents",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "continuationToken",
          "in" : "query",
          "description" : "A token returned by a prior request. If present, the next page of results are returned",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repository",
          "in" : "query",
          "description" : "Repository from which you would like to retrieve components",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageComponentXO"
            }
          },
          "403" : {
            "description" : "Insufficient permissions to list components"
          },
          "422" : {
            "description" : "Parameter 'repository' is required"
          }
        }
      },
      "post" : {
        "tags" : [ "components" ],
        "summary" : "Upload a single component",
        "description" : "",
        "operationId" : "uploadComponent",
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repository",
          "in" : "query",
          "description" : "Name of the repository to which you would like to upload the component",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "yum.directory",
          "in" : "formData",
          "description" : "yum Directory",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "yum.tag",
          "in" : "formData",
          "description" : "yum Tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "yum.asset",
          "in" : "formData",
          "description" : "yum Asset ",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "yum.asset.filename",
          "in" : "formData",
          "description" : "yum Asset  Filename",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "r.tag",
          "in" : "formData",
          "description" : "r Tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "r.asset",
          "in" : "formData",
          "description" : "r Asset ",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "r.asset.pathId",
          "in" : "formData",
          "description" : "r Asset  Package Path",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "apt.tag",
          "in" : "formData",
          "description" : "apt Tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "apt.asset",
          "in" : "formData",
          "description" : "apt Asset ",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "pypi.tag",
          "in" : "formData",
          "description" : "pypi Tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.asset",
          "in" : "formData",
          "description" : "pypi Asset ",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "maven2.groupId",
          "in" : "formData",
          "description" : "maven2 Group ID",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven2.artifactId",
          "in" : "formData",
          "description" : "maven2 Artifact ID",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven2.version",
          "in" : "formData",
          "description" : "maven2 Version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven2.generate-pom",
          "in" : "formData",
          "description" : "maven2 Generate a POM file with these coordinates",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "maven2.packaging",
          "in" : "formData",
          "description" : "maven2 Packaging",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven2.tag",
          "in" : "formData",
          "description" : "maven2 Tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven2.asset1",
          "in" : "formData",
          "description" : "maven2 Asset 1",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "maven2.asset1.classifier",
          "in" : "formData",
          "description" : "maven2 Asset 1 Classifier",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven2.asset1.extension",
          "in" : "formData",
          "description" : "maven2 Asset 1 Extension",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven2.asset2",
          "in" : "formData",
          "description" : "maven2 Asset 2",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "maven2.asset2.classifier",
          "in" : "formData",
          "description" : "maven2 Asset 2 Classifier",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven2.asset2.extension",
          "in" : "formData",
          "description" : "maven2 Asset 2 Extension",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven2.asset3",
          "in" : "formData",
          "description" : "maven2 Asset 3",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "maven2.asset3.classifier",
          "in" : "formData",
          "description" : "maven2 Asset 3 Classifier",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven2.asset3.extension",
          "in" : "formData",
          "description" : "maven2 Asset 3 Extension",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "raw.directory",
          "in" : "formData",
          "description" : "raw Directory",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "raw.tag",
          "in" : "formData",
          "description" : "raw Tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "raw.asset1",
          "in" : "formData",
          "description" : "raw Asset 1",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "raw.asset1.filename",
          "in" : "formData",
          "description" : "raw Asset 1 Filename",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "raw.asset2",
          "in" : "formData",
          "description" : "raw Asset 2",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "raw.asset2.filename",
          "in" : "formData",
          "description" : "raw Asset 2 Filename",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "raw.asset3",
          "in" : "formData",
          "description" : "raw Asset 3",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "raw.asset3.filename",
          "in" : "formData",
          "description" : "raw Asset 3 Filename",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.tag",
          "in" : "formData",
          "description" : "npm Tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.asset",
          "in" : "formData",
          "description" : "npm Asset ",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "nuget.tag",
          "in" : "formData",
          "description" : "nuget Tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.asset",
          "in" : "formData",
          "description" : "nuget Asset ",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "rubygems.tag",
          "in" : "formData",
          "description" : "rubygems Tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rubygems.asset",
          "in" : "formData",
          "description" : "rubygems Asset ",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "helm.tag",
          "in" : "formData",
          "description" : "helm Tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "helm.asset",
          "in" : "formData",
          "description" : "helm Asset ",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "docker.tag",
          "in" : "formData",
          "description" : "docker Tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.asset",
          "in" : "formData",
          "description" : "docker Asset ",
          "required" : false,
          "type" : "file"
        } ],
        "responses" : {
          "403" : {
            "description" : "Insufficient permissions to upload a component"
          },
          "422" : {
            "description" : "Parameter 'repository' is required"
          }
        }
      }
    },
    "/v1/components/{id}" : {
      "get" : {
        "tags" : [ "components" ],
        "summary" : "Get a single component",
        "description" : "",
        "operationId" : "getComponentById",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the component to retrieve",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ComponentXO"
            }
          },
          "403" : {
            "description" : "Insufficient permissions to get component"
          },
          "404" : {
            "description" : "Component not found"
          },
          "422" : {
            "description" : "Malformed ID"
          }
        }
      },
      "delete" : {
        "tags" : [ "components" ],
        "summary" : "Delete a single component",
        "description" : "",
        "operationId" : "deleteComponent",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the component to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Component was successfully deleted"
          },
          "403" : {
            "description" : "Insufficient permissions to delete component"
          },
          "404" : {
            "description" : "Component not found"
          },
          "422" : {
            "description" : "Malformed ID"
          }
        }
      }
    },
    "/v1/security/privileges/repository-view/{privilegeName}" : {
      "put" : {
        "tags" : [ "Security management: privileges" ],
        "summary" : "Update a repository view type privilege.",
        "description" : "",
        "operationId" : "updatePrivilege",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "privilegeName",
          "in" : "path",
          "description" : "The name of the privilege to update.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The privilege to update.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ApiPrivilegeRepositoryViewRequest"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Privilege object not configured properly."
          },
          "403" : {
            "description" : "The user does not have permission to perform the operation."
          },
          "404" : {
            "description" : "Privilege not found in the system."
          }
        }
      }
    },
    "/v1/security/privileges/repository-content-selector/{privilegeName}" : {
      "put" : {
        "tags" : [ "Security management: privileges" ],
        "summary" : "Update a repository content selector type privilege.",
        "description" : "",
        "operationId" : "updatePrivilege_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "privilegeName",
          "in" : "path",
          "description" : "The name of the privilege to update.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The privilege to update.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ApiPrivilegeRepositoryContentSelectorRequest"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Privilege object not configured properly."
          },
          "403" : {
            "description" : "The user does not have permission to perform the operation."
          },
          "404" : {
            "description" : "Privilege not found in the system."
          }
        }
      }
    },
    "/v1/security/privileges/repository-admin/{privilegeName}" : {
      "put" : {
        "tags" : [ "Security management: privileges" ],
        "summary" : "Update a repository admin type privilege.",
        "description" : "",
        "operationId" : "updatePrivilege_2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "privilegeName",
          "in" : "path",
          "description" : "The name of the privilege to update.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The privilege to update.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ApiPrivilegeRepositoryAdminRequest"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Privilege object not configured properly."
          },
          "403" : {
            "description" : "The user does not have permission to perform the operation."
          },
          "404" : {
            "description" : "Privilege not found in the system."
          }
        }
      }
    },
    "/v1/security/privileges/repository-view" : {
      "post" : {
        "tags" : [ "Security management: privileges" ],
        "summary" : "Create a repository view type privilege.",
        "description" : "",
        "operationId" : "createPrivilege",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The privilege to create.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ApiPrivilegeRepositoryViewRequest"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Privilege object not configured properly."
          },
          "403" : {
            "description" : "The user does not have permission to perform the operation."
          }
        }
      }
    },
    "/v1/security/privileges/repository-content-selector" : {
      "post" : {
        "tags" : [ "Security management: privileges" ],
        "summary" : "Create a repository content selector type privilege.",
        "description" : "",
        "operationId" : "createPrivilege_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The privilege to create.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ApiPrivilegeRepositoryContentSelectorRequest"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Privilege object not configured properly."
          },
          "403" : {
            "description" : "The user does not have permission to perform the operation."
          }
        }
      }
    },
    "/v1/security/privileges/repository-admin" : {
      "post" : {
        "tags" : [ "Security management: privileges" ],
        "summary" : "Create a repository admin type privilege.",
        "description" : "",
        "operationId" : "createPrivilege_2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The privilege to create.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ApiPrivilegeRepositoryAdminRequest"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Privilege object not configured properly."
          },
          "403" : {
            "description" : "The user does not have permission to perform the operation."
          }
        }
      }
    },
    "/v1/repositories/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository details",
        "description" : "",
        "operationId" : "getRepository",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to get",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RepositoryXO"
            }
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Repository not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Delete repository of any format",
        "description" : "",
        "operationId" : "deleteRepository",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository deleted"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Repository not found"
          }
        }
      }
    },
    "/v1/repositories" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "List repositories",
        "description" : "",
        "operationId" : "getRepositories",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/RepositoryXO"
              }
            }
          }
        }
      }
    },
    "/v1/routing-rules/{name}" : {
      "get" : {
        "tags" : [ "Routing rules" ],
        "summary" : "Get a single routing rule",
        "description" : "",
        "operationId" : "getRoutingRule",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the routing rule to get",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RoutingRuleXO"
            }
          },
          "403" : {
            "description" : "Insufficient permissions to read routing rules"
          },
          "404" : {
            "description" : "Routing rule not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Routing rules" ],
        "summary" : "Update a single routing rule",
        "description" : "",
        "operationId" : "updateRoutingRule",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the routing rule to update",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "A routing rule configuration",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RoutingRuleXO"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Routing rule was successfully updated"
          },
          "400" : {
            "description" : "Another routing rule with the same name already exists or required parameters missing"
          },
          "403" : {
            "description" : "Insufficient permissions to edit routing rules"
          },
          "404" : {
            "description" : "Routing rule not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Routing rules" ],
        "summary" : "Delete a single routing rule",
        "description" : "",
        "operationId" : "deleteRoutingRule",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the routing rule to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Routing rule was successfully deleted"
          },
          "403" : {
            "description" : "Insufficient permissions to delete routing rules"
          },
          "404" : {
            "description" : "Routing rule not found"
          }
        }
      }
    },
    "/v1/routing-rules" : {
      "get" : {
        "tags" : [ "Routing rules" ],
        "summary" : "List routing rules",
        "description" : "",
        "operationId" : "getRoutingRules",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/RoutingRuleXO"
              }
            }
          },
          "403" : {
            "description" : "Insufficient permissions to read routing rules"
          }
        }
      },
      "post" : {
        "tags" : [ "Routing rules" ],
        "summary" : "Create a single routing rule",
        "description" : "",
        "operationId" : "createRoutingRule",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "A routing rule configuration",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RoutingRuleXO"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Routing rule was successfully created"
          },
          "400" : {
            "description" : "A routing rule with the same name already exists or required parameters missing"
          },
          "403" : {
            "description" : "Insufficient permissions to create routing rule"
          }
        }
      }
    },
    "/v1/search" : {
      "get" : {
        "tags" : [ "Search" ],
        "summary" : "Search components",
        "description" : "All searches require at least one criterion of at least three characters before a trailing wildcard (\\*) and cannot start with a wildcard (\\*). Enclose your criteria in quotation marks to search an exact phrase; otherwise, search criteria will be split by any commas, spaces, dashes, or forward slashes.",
        "operationId" : "search",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "continuationToken",
          "in" : "query",
          "description" : "A token returned by a prior request. If present, the next page of results are returned",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The field to sort the results against, if left empty, a sort based on match weight will be used.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "enum" : [ "group", "name", "version", "repository" ]
        }, {
          "name" : "direction",
          "in" : "query",
          "description" : "The direction to sort records in, defaults to ascending ('asc') for all sort fields, except version, which defaults to descending ('desc')",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "enum" : [ "asc", "desc" ]
        }, {
          "name" : "timeout",
          "in" : "query",
          "description" : "How long to wait for search results in seconds. If this value is not provided, the system default timeout will be used.",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "allowEmptyValue" : true
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Query by keyword",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repository",
          "in" : "query",
          "description" : "Repository name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "format",
          "in" : "query",
          "description" : "Query by format",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group",
          "in" : "query",
          "description" : "Component group",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Component name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Component version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "prerelease",
          "in" : "query",
          "description" : "Prerelease version flag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "md5",
          "in" : "query",
          "description" : "Specific MD5 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sha1",
          "in" : "query",
          "description" : "Specific SHA-1 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sha256",
          "in" : "query",
          "description" : "Specific SHA-256 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sha512",
          "in" : "query",
          "description" : "Specific SHA-512 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "composer.vendor",
          "in" : "query",
          "description" : "Vendor",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "composer.package",
          "in" : "query",
          "description" : "Package",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "composer.version",
          "in" : "query",
          "description" : "Version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.baseVersion",
          "in" : "query",
          "description" : "Conan base version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.channel",
          "in" : "query",
          "description" : "Conan channel",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.revision",
          "in" : "query",
          "description" : "Conan recipe revision",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.packageId",
          "in" : "query",
          "description" : "Conan package id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.packageRevision",
          "in" : "query",
          "description" : "Conan package revision",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.baseVersion.strict",
          "in" : "query",
          "description" : "Conan base version strict",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.revision.latest",
          "in" : "query",
          "description" : "Return latest revision",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.arch",
          "in" : "query",
          "description" : "Conan arch",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.os",
          "in" : "query",
          "description" : "Conan os",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.compiler",
          "in" : "query",
          "description" : "Conan compiler",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.compiler.version",
          "in" : "query",
          "description" : "Conan compiler version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.compiler.runtime",
          "in" : "query",
          "description" : "Conan compiler runtime",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.imageName",
          "in" : "query",
          "description" : "Docker image name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.imageTag",
          "in" : "query",
          "description" : "Docker image tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.layerId",
          "in" : "query",
          "description" : "Docker layer ID",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.contentDigest",
          "in" : "query",
          "description" : "Docker content digest",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.groupId",
          "in" : "query",
          "description" : "Maven groupId",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.artifactId",
          "in" : "query",
          "description" : "Maven artifactId",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.baseVersion",
          "in" : "query",
          "description" : "Maven base version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.extension",
          "in" : "query",
          "description" : "Maven extension of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.classifier",
          "in" : "query",
          "description" : "Maven classifier of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "gavec",
          "in" : "query",
          "description" : "Group asset version extension classifier",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.scope",
          "in" : "query",
          "description" : "npm scope",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.author",
          "in" : "query",
          "description" : "npm author",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.description",
          "in" : "query",
          "description" : "npm description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.keywords",
          "in" : "query",
          "description" : "npm keywords",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.license",
          "in" : "query",
          "description" : "npm license",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.tagged_is",
          "in" : "query",
          "description" : "npm tagged is",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.tagged_not",
          "in" : "query",
          "description" : "npm tagged not",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.id",
          "in" : "query",
          "description" : "NuGet id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.tags",
          "in" : "query",
          "description" : "NuGet tags",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.title",
          "in" : "query",
          "description" : "NuGet title",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.authors",
          "in" : "query",
          "description" : "NuGet authors",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.description",
          "in" : "query",
          "description" : "NuGet description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.summary",
          "in" : "query",
          "description" : "NuGet summary",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.is_prerelease",
          "in" : "query",
          "description" : "NuGet prerelease",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "p2.pluginName",
          "in" : "query",
          "description" : "p2 plugin name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.classifiers",
          "in" : "query",
          "description" : "PyPI classifiers",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.description",
          "in" : "query",
          "description" : "PyPI description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.keywords",
          "in" : "query",
          "description" : "PyPI keywords",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.summary",
          "in" : "query",
          "description" : "PyPI summary",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rubygems.description",
          "in" : "query",
          "description" : "RubyGems description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rubygems.platform",
          "in" : "query",
          "description" : "RubyGems platform",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rubygems.summary",
          "in" : "query",
          "description" : "RubyGems summary",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Component tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "yum.architecture",
          "in" : "query",
          "description" : "Yum architecture",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "yum.name",
          "in" : "query",
          "description" : "Yum package name",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageComponentXO"
            }
          }
        }
      }
    },
    "/v1/search/assets" : {
      "get" : {
        "tags" : [ "Search" ],
        "summary" : "Search assets",
        "description" : "All searches require at least one criterion of at least three characters before a trailing wildcard (\\*) and cannot start with a wildcard (\\*). Enclose your criteria in quotation marks to search an exact phrase; otherwise, search criteria will be split by any commas, spaces, dashes, or forward slashes.",
        "operationId" : "searchAssets",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "continuationToken",
          "in" : "query",
          "description" : "A token returned by a prior request. If present, the next page of results are returned",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The field to sort the results against, if left empty, a sort based on match weight will be used.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "enum" : [ "group", "name", "version", "repository" ]
        }, {
          "name" : "direction",
          "in" : "query",
          "description" : "The direction to sort records in, defaults to ascending ('asc') for all sort fields, except version, which defaults to descending ('desc')",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "enum" : [ "asc", "desc" ]
        }, {
          "name" : "timeout",
          "in" : "query",
          "description" : "How long to wait for search results in seconds. If this value is not provided, the system default timeout will be used.",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "allowEmptyValue" : true
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Query by keyword",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repository",
          "in" : "query",
          "description" : "Repository name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "format",
          "in" : "query",
          "description" : "Query by format",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group",
          "in" : "query",
          "description" : "Component group",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Component name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Component version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "prerelease",
          "in" : "query",
          "description" : "Prerelease version flag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "md5",
          "in" : "query",
          "description" : "Specific MD5 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sha1",
          "in" : "query",
          "description" : "Specific SHA-1 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sha256",
          "in" : "query",
          "description" : "Specific SHA-256 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sha512",
          "in" : "query",
          "description" : "Specific SHA-512 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "composer.vendor",
          "in" : "query",
          "description" : "Vendor",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "composer.package",
          "in" : "query",
          "description" : "Package",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "composer.version",
          "in" : "query",
          "description" : "Version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.baseVersion",
          "in" : "query",
          "description" : "Conan base version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.channel",
          "in" : "query",
          "description" : "Conan channel",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.revision",
          "in" : "query",
          "description" : "Conan recipe revision",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.packageId",
          "in" : "query",
          "description" : "Conan package id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.packageRevision",
          "in" : "query",
          "description" : "Conan package revision",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.baseVersion.strict",
          "in" : "query",
          "description" : "Conan base version strict",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.revision.latest",
          "in" : "query",
          "description" : "Return latest revision",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.arch",
          "in" : "query",
          "description" : "Conan arch",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.os",
          "in" : "query",
          "description" : "Conan os",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.compiler",
          "in" : "query",
          "description" : "Conan compiler",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.compiler.version",
          "in" : "query",
          "description" : "Conan compiler version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.compiler.runtime",
          "in" : "query",
          "description" : "Conan compiler runtime",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.imageName",
          "in" : "query",
          "description" : "Docker image name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.imageTag",
          "in" : "query",
          "description" : "Docker image tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.layerId",
          "in" : "query",
          "description" : "Docker layer ID",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.contentDigest",
          "in" : "query",
          "description" : "Docker content digest",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.groupId",
          "in" : "query",
          "description" : "Maven groupId",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.artifactId",
          "in" : "query",
          "description" : "Maven artifactId",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.baseVersion",
          "in" : "query",
          "description" : "Maven base version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.extension",
          "in" : "query",
          "description" : "Maven extension of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.classifier",
          "in" : "query",
          "description" : "Maven classifier of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "gavec",
          "in" : "query",
          "description" : "Group asset version extension classifier",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.scope",
          "in" : "query",
          "description" : "npm scope",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.author",
          "in" : "query",
          "description" : "npm author",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.description",
          "in" : "query",
          "description" : "npm description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.keywords",
          "in" : "query",
          "description" : "npm keywords",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.license",
          "in" : "query",
          "description" : "npm license",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.tagged_is",
          "in" : "query",
          "description" : "npm tagged is",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.tagged_not",
          "in" : "query",
          "description" : "npm tagged not",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.id",
          "in" : "query",
          "description" : "NuGet id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.tags",
          "in" : "query",
          "description" : "NuGet tags",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.title",
          "in" : "query",
          "description" : "NuGet title",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.authors",
          "in" : "query",
          "description" : "NuGet authors",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.description",
          "in" : "query",
          "description" : "NuGet description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.summary",
          "in" : "query",
          "description" : "NuGet summary",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.is_prerelease",
          "in" : "query",
          "description" : "NuGet prerelease",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "p2.pluginName",
          "in" : "query",
          "description" : "p2 plugin name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.classifiers",
          "in" : "query",
          "description" : "PyPI classifiers",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.description",
          "in" : "query",
          "description" : "PyPI description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.keywords",
          "in" : "query",
          "description" : "PyPI keywords",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.summary",
          "in" : "query",
          "description" : "PyPI summary",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rubygems.description",
          "in" : "query",
          "description" : "RubyGems description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rubygems.platform",
          "in" : "query",
          "description" : "RubyGems platform",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rubygems.summary",
          "in" : "query",
          "description" : "RubyGems summary",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Component tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "yum.architecture",
          "in" : "query",
          "description" : "Yum architecture",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "yum.name",
          "in" : "query",
          "description" : "Yum package name",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageAssetXO"
            }
          }
        }
      }
    },
    "/v1/search/assets/download" : {
      "get" : {
        "tags" : [ "Search" ],
        "summary" : "Search and download asset",
        "description" : "Returns a 302 Found with location header field set to download URL. Unless a sort parameter is supplied, the search must return a single asset to receive download URL.",
        "operationId" : "searchAndDownloadAssets",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "sort",
          "in" : "query",
          "description" : "The field to sort the results against, if left empty and more than 1 result is returned, the request will fail.",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "enum" : [ "group", "name", "version", "repository" ]
        }, {
          "name" : "direction",
          "in" : "query",
          "description" : "The direction to sort records in, defaults to ascending ('asc') for all sort fields, except version, which defaults to descending ('desc')",
          "required" : false,
          "type" : "string",
          "allowEmptyValue" : true,
          "enum" : [ "asc", "desc" ]
        }, {
          "name" : "timeout",
          "in" : "query",
          "description" : "How long to wait for search results in seconds. If this value is not provided, the system default timeout will be used.",
          "required" : false,
          "type" : "integer",
          "format" : "int32",
          "allowEmptyValue" : true
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Query by keyword",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repository",
          "in" : "query",
          "description" : "Repository name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "format",
          "in" : "query",
          "description" : "Query by format",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group",
          "in" : "query",
          "description" : "Component group",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Component name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Component version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "prerelease",
          "in" : "query",
          "description" : "Prerelease version flag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "md5",
          "in" : "query",
          "description" : "Specific MD5 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sha1",
          "in" : "query",
          "description" : "Specific SHA-1 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sha256",
          "in" : "query",
          "description" : "Specific SHA-256 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sha512",
          "in" : "query",
          "description" : "Specific SHA-512 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "composer.vendor",
          "in" : "query",
          "description" : "Vendor",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "composer.package",
          "in" : "query",
          "description" : "Package",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "composer.version",
          "in" : "query",
          "description" : "Version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.baseVersion",
          "in" : "query",
          "description" : "Conan base version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.channel",
          "in" : "query",
          "description" : "Conan channel",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.revision",
          "in" : "query",
          "description" : "Conan recipe revision",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.packageId",
          "in" : "query",
          "description" : "Conan package id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.packageRevision",
          "in" : "query",
          "description" : "Conan package revision",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.baseVersion.strict",
          "in" : "query",
          "description" : "Conan base version strict",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.revision.latest",
          "in" : "query",
          "description" : "Return latest revision",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.arch",
          "in" : "query",
          "description" : "Conan arch",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.os",
          "in" : "query",
          "description" : "Conan os",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.compiler",
          "in" : "query",
          "description" : "Conan compiler",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.compiler.version",
          "in" : "query",
          "description" : "Conan compiler version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.compiler.runtime",
          "in" : "query",
          "description" : "Conan compiler runtime",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.imageName",
          "in" : "query",
          "description" : "Docker image name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.imageTag",
          "in" : "query",
          "description" : "Docker image tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.layerId",
          "in" : "query",
          "description" : "Docker layer ID",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.contentDigest",
          "in" : "query",
          "description" : "Docker content digest",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.groupId",
          "in" : "query",
          "description" : "Maven groupId",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.artifactId",
          "in" : "query",
          "description" : "Maven artifactId",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.baseVersion",
          "in" : "query",
          "description" : "Maven base version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.extension",
          "in" : "query",
          "description" : "Maven extension of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.classifier",
          "in" : "query",
          "description" : "Maven classifier of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "gavec",
          "in" : "query",
          "description" : "Group asset version extension classifier",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.scope",
          "in" : "query",
          "description" : "npm scope",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.author",
          "in" : "query",
          "description" : "npm author",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.description",
          "in" : "query",
          "description" : "npm description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.keywords",
          "in" : "query",
          "description" : "npm keywords",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.license",
          "in" : "query",
          "description" : "npm license",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.tagged_is",
          "in" : "query",
          "description" : "npm tagged is",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.tagged_not",
          "in" : "query",
          "description" : "npm tagged not",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.id",
          "in" : "query",
          "description" : "NuGet id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.tags",
          "in" : "query",
          "description" : "NuGet tags",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.title",
          "in" : "query",
          "description" : "NuGet title",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.authors",
          "in" : "query",
          "description" : "NuGet authors",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.description",
          "in" : "query",
          "description" : "NuGet description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.summary",
          "in" : "query",
          "description" : "NuGet summary",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.is_prerelease",
          "in" : "query",
          "description" : "NuGet prerelease",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "p2.pluginName",
          "in" : "query",
          "description" : "p2 plugin name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.classifiers",
          "in" : "query",
          "description" : "PyPI classifiers",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.description",
          "in" : "query",
          "description" : "PyPI description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.keywords",
          "in" : "query",
          "description" : "PyPI keywords",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.summary",
          "in" : "query",
          "description" : "PyPI summary",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rubygems.description",
          "in" : "query",
          "description" : "RubyGems description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rubygems.platform",
          "in" : "query",
          "description" : "RubyGems platform",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rubygems.summary",
          "in" : "query",
          "description" : "RubyGems summary",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Component tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "yum.architecture",
          "in" : "query",
          "description" : "Yum architecture",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "yum.name",
          "in" : "query",
          "description" : "Yum package name",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "ValidationErrorXO{id='*', message='Search returned multiple assets, please refine search criteria to find a single asset or use the sort query parameter to retrieve the first result.'}"
          },
          "404" : {
            "description" : "Asset search returned no results"
          }
        }
      }
    },
    "/v1/security/content-selectors/{name}" : {
      "get" : {
        "tags" : [ "Content selectors" ],
        "summary" : "Get a content selector by name",
        "description" : "",
        "operationId" : "getContentSelector",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The content selector name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ContentSelectorApiResponse"
            }
          },
          "403" : {
            "description" : "Insufficient permissions to read the content selector"
          }
        }
      },
      "put" : {
        "tags" : [ "Content selectors" ],
        "summary" : "Update a content selector",
        "description" : "",
        "operationId" : "updateContentSelector",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The content selector name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ContentSelectorApiUpdateRequest"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Content selector updated successfully"
          },
          "400" : {
            "description" : "Invalid request"
          },
          "403" : {
            "description" : "Insufficient permissions to update the content selector"
          }
        }
      },
      "delete" : {
        "tags" : [ "Content selectors" ],
        "summary" : "Delete a content selector",
        "description" : "",
        "operationId" : "deleteContentSelector",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Content selector deleted successfully"
          },
          "400" : {
            "description" : "Invalid request"
          },
          "403" : {
            "description" : "Insufficient permissions to delete the content selector"
          }
        }
      }
    },
    "/v1/security/content-selectors" : {
      "get" : {
        "tags" : [ "Content selectors" ],
        "summary" : "List content selectors",
        "description" : "",
        "operationId" : "getContentSelectors",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ContentSelectorApiResponse"
              }
            }
          },
          "403" : {
            "description" : "Insufficient permissions to read content selectors"
          }
        }
      },
      "post" : {
        "tags" : [ "Content selectors" ],
        "summary" : "Create a new content selector",
        "description" : "",
        "operationId" : "createContentSelector",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ContentSelectorApiCreateRequest"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Content selector successfully created"
          },
          "400" : {
            "description" : "Invalid request"
          },
          "403" : {
            "description" : "Insufficient permissions to create content selectors"
          }
        }
      }
    },
    "/v1/repositories/{repositoryName}/invalidate-cache" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Invalidate repository cache. Proxy or group repositories only.",
        "description" : "",
        "operationId" : "invalidateCache",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to invalidate cache",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository cache invalidated"
          },
          "400" : {
            "description" : "Repository is not of proxy or group type"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Repository not found"
          }
        }
      }
    },
    "/v1/repositories/{repositoryName}/rebuild-index" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Schedule a 'Repair - Rebuild repository search' Task. Hosted or proxy repositories only.",
        "description" : "",
        "operationId" : "rebuildIndex",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to rebuild index",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository search index rebuild has been scheduled"
          },
          "400" : {
            "description" : "Repository is not of hosted or proxy type"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Repository not found"
          }
        }
      }
    },
    "/v1/repositorySettings" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "List repositories",
        "description" : "",
        "operationId" : "getRepositories_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Repositories list returned",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/AbstractApiRepository"
              }
            }
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/tasks/{id}/run" : {
      "post" : {
        "tags" : [ "Tasks" ],
        "summary" : "Run task",
        "description" : "",
        "operationId" : "run",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the task to run",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Task was run"
          },
          "404" : {
            "description" : "Task not found"
          },
          "405" : {
            "description" : "Task is disabled"
          }
        }
      }
    },
    "/v1/tasks/{id}/stop" : {
      "post" : {
        "tags" : [ "Tasks" ],
        "summary" : "Stop task",
        "description" : "",
        "operationId" : "stop",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the task to stop",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Task was stopped"
          },
          "409" : {
            "description" : "Unable to stop task"
          },
          "404" : {
            "description" : "Task not found"
          }
        }
      }
    },
    "/v1/tasks/{id}" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Get a single task by id",
        "description" : "",
        "operationId" : "getTaskById",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the task to get",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TaskXO"
            }
          },
          "404" : {
            "description" : "Task not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Tasks" ],
        "summary" : "Delete task by id",
        "description" : "",
        "operationId" : "deleteTaskById",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/tasks" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "List tasks",
        "description" : "",
        "operationId" : "getTasks",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "Type of the tasks to get",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageTaskXO"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Tasks" ],
        "summary" : "Create task",
        "description" : "",
        "operationId" : "createTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/TaskTemplateXO"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/security/users/{userId}" : {
      "put" : {
        "tags" : [ "Security management: users" ],
        "summary" : "Update an existing user.",
        "description" : "",
        "operationId" : "updateUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The userid the request should apply to.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "A representation of the user to update.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ApiUser"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Password was not supplied in the body of the request"
          },
          "403" : {
            "description" : "The user does not have permission to perform the operation."
          },
          "404" : {
            "description" : "User or user source not found in the system."
          }
        }
      },
      "delete" : {
        "tags" : [ "Security management: users" ],
        "summary" : "Delete a user.",
        "description" : "",
        "operationId" : "deleteUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The userid the request should apply to.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "realm",
          "in" : "query",
          "description" : "The realm the request should apply to.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "There was problem deleting a user. Consult the response body for more details"
          },
          "403" : {
            "description" : "The user does not have permission to perform the operation."
          },
          "404" : {
            "description" : "User or user source not found in the system."
          }
        }
      }
    },
    "/v1/security/users" : {
      "get" : {
        "tags" : [ "Security management: users" ],
        "summary" : "Retrieve a list of users.",
        "description" : "",
        "operationId" : "getUsers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "query",
          "description" : "An optional term to search userids for.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "source",
          "in" : "query",
          "description" : "An optional user source to restrict the search to.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ApiUser"
              }
            }
          },
          "400" : {
            "description" : "Password was not supplied in the body of the request"
          },
          "403" : {
            "description" : "The user does not have permission to perform the operation."
          }
        }
      },
      "post" : {
        "tags" : [ "Security management: users" ],
        "summary" : "Create a new user in the default source.",
        "description" : "",
        "operationId" : "createUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "A representation of the user to create.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ApiCreateUser"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiUser"
            }
          },
          "400" : {
            "description" : "Password was not supplied in the body of the request"
          },
          "403" : {
            "description" : "The user does not have permission to perform the operation."
          }
        }
      }
    },
    "/v1/security/privileges/{privilegeName}" : {
      "get" : {
        "tags" : [ "Security management: privileges" ],
        "summary" : "Retrieve a privilege by name.",
        "description" : "",
        "operationId" : "getPrivilege",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "privilegeName",
          "in" : "path",
          "description" : "The name of the privilege to retrieve.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiPrivilege"
            }
          },
          "403" : {
            "description" : "The user does not have permission to perform the operation."
          },
          "404" : {
            "description" : "Privilege not found in the system."
          }
        }
      },
      "delete" : {
        "tags" : [ "Security management: privileges" ],
        "summary" : "Delete a privilege by name.",
        "description" : "",
        "operationId" : "deletePrivilege",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "privilegeName",
          "in" : "path",
          "description" : "The name of the privilege to delete.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "The privilege is internal and may not be altered."
          },
          "403" : {
            "description" : "The user does not have permission to perform the operation."
          },
          "404" : {
            "description" : "Privilege not found in the system."
          }
        }
      }
    },
    "/v1/security/privileges" : {
      "get" : {
        "tags" : [ "Security management: privileges" ],
        "summary" : "Retrieve a list of privileges.",
        "description" : "",
        "operationId" : "getPrivileges",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ApiPrivilege"
              }
            }
          },
          "403" : {
            "description" : "The user does not have permission to perform the operation."
          }
        }
      }
    },
    "/v1/security/privileges/wildcard/{privilegeName}" : {
      "put" : {
        "tags" : [ "Security management: privileges" ],
        "summary" : "Update a wildcard type privilege.",
        "description" : "",
        "operationId" : "updatePrivilege_3",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "privilegeName",
          "in" : "path",
          "description" : "The name of the privilege to update.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The privilege to update.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ApiPrivilegeWildcardRequest"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Privilege object not configured properly."
          },
          "403" : {
            "description" : "The user does not have permission to perform the operation."
          },
          "404" : {
            "description" : "Privilege not found in the system."
          }
        }
      }
    },
    "/v1/security/privileges/application/{privilegeName}" : {
      "put" : {
        "tags" : [ "Security management: privileges" ],
        "summary" : "Update an application type privilege.",
        "description" : "",
        "operationId" : "updatePrivilege_4",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "privilegeName",
          "in" : "path",
          "description" : "The name of the privilege to update.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The privilege to update.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ApiPrivilegeApplicationRequest"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Privilege object not configured properly."
          },
          "403" : {
            "description" : "The user does not have permission to perform the operation."
          },
          "404" : {
            "description" : "Privilege not found in the system."
          }
        }
      }
    },
    "/v1/security/privileges/application" : {
      "post" : {
        "tags" : [ "Security management: privileges" ],
        "summary" : "Create an application type privilege.",
        "description" : "",
        "operationId" : "createPrivilege_3",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The privilege to create.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ApiPrivilegeApplicationRequest"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Privilege object not configured properly."
          },
          "403" : {
            "description" : "The user does not have permission to perform the operation."
          }
        }
      }
    },
    "/v1/security/privileges/wildcard" : {
      "post" : {
        "tags" : [ "Security management: privileges" ],
        "summary" : "Create a wildcard type privilege.",
        "description" : "",
        "operationId" : "createPrivilege_4",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The privilege to create.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ApiPrivilegeWildcardRequest"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Privilege object not configured properly."
          },
          "403" : {
            "description" : "The user does not have permission to perform the operation."
          }
        }
      }
    },
    "/v1/security/roles/{id}" : {
      "get" : {
        "tags" : [ "Security management: roles" ],
        "summary" : "Get role",
        "description" : "",
        "operationId" : "getRole",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "source",
          "in" : "query",
          "description" : "The id of the user source to filter the roles by. Available sources can be fetched using the 'User Sources' endpoint.",
          "required" : false,
          "type" : "string",
          "default" : "default"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the role to get",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RoleXOResponse"
            }
          },
          "400" : {
            "description" : "The specified source does not exist"
          },
          "403" : {
            "description" : "Insufficient permissions to read roles"
          },
          "404" : {
            "description" : "Role not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Security management: roles" ],
        "summary" : "Update role",
        "description" : "",
        "operationId" : "update",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the role to update",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "A role configuration",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RoleXORequest"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Insufficient permissions to update role"
          },
          "404" : {
            "description" : "Role not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Security management: roles" ],
        "summary" : "Delete role",
        "description" : "",
        "operationId" : "delete",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the role to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "403" : {
            "description" : "Insufficient permissions to delete role"
          },
          "404" : {
            "description" : "Role not found"
          }
        }
      }
    },
    "/v1/security/roles" : {
      "get" : {
        "tags" : [ "Security management: roles" ],
        "summary" : "List roles",
        "description" : "",
        "operationId" : "getRoles",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "source",
          "in" : "query",
          "description" : "The id of the user source to filter the roles by, if supplied. Otherwise roles from all user sources will be returned.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/RoleXOResponse"
              }
            }
          },
          "400" : {
            "description" : "The specified source does not exist"
          },
          "403" : {
            "description" : "Insufficient permissions to read roles"
          }
        }
      },
      "post" : {
        "tags" : [ "Security management: roles" ],
        "summary" : "Create role",
        "description" : "",
        "operationId" : "create",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "A role configuration",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RoleXORequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RoleXOResponse"
            }
          },
          "403" : {
            "description" : "Insufficient permissions to create role"
          }
        }
      }
    },
    "/v1/repositories/apt/hosted/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AptHostedApiRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update APT hosted repository",
        "description" : "",
        "operationId" : "updateRepository",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AptHostedRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Repository not found"
          }
        }
      }
    },
    "/v1/repositories/apt/hosted" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create APT hosted repository",
        "description" : "",
        "operationId" : "createRepository",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AptHostedRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "405" : {
            "description" : "Feature is disabled in High Availability"
          }
        }
      }
    },
    "/v1/repositories/apt/proxy/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AptProxyApiRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update APT proxy repository",
        "description" : "",
        "operationId" : "updateRepository_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AptProxyRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Repository not found"
          }
        }
      }
    },
    "/v1/repositories/apt/proxy" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create APT proxy repository",
        "description" : "",
        "operationId" : "createRepository_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AptProxyRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "405" : {
            "description" : "Feature is disabled in High Availability"
          }
        }
      }
    },
    "/v1/repositories/maven/hosted/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_3",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MavenHostedApiRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update Maven hosted repository",
        "description" : "",
        "operationId" : "updateRepository_2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MavenHostedRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/maven/hosted" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create Maven hosted repository",
        "description" : "",
        "operationId" : "createRepository_2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MavenHostedRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/maven/group/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_4",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiGroupRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update Maven group repository",
        "description" : "",
        "operationId" : "updateRepository_3",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MavenGroupRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/maven/group" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create Maven group repository",
        "description" : "",
        "operationId" : "createRepository_3",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MavenGroupRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/maven/proxy/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_5",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MavenProxyApiRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update Maven proxy repository",
        "description" : "",
        "operationId" : "updateRepository_4",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MavenProxyRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/maven/proxy" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create Maven proxy repository",
        "description" : "",
        "operationId" : "createRepository_4",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/MavenProxyRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/raw/proxy/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_6",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiProxyRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update raw proxy repository",
        "description" : "",
        "operationId" : "updateRepository_5",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RawProxyRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/raw/proxy" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create raw proxy repository",
        "description" : "",
        "operationId" : "createRepository_5",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RawProxyRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/raw/hosted/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_7",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiHostedRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update raw hosted repository",
        "description" : "",
        "operationId" : "updateRepository_6",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RawHostedRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/raw/hosted" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create raw hosted repository",
        "description" : "",
        "operationId" : "createRepository_6",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RawHostedRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/raw/group/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_8",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiGroupRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update raw group repository",
        "description" : "",
        "operationId" : "updateRepository_7",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RawGroupRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/raw/group" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create raw group repository",
        "description" : "",
        "operationId" : "createRepository_7",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RawGroupRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/security/privileges/script/{privilegeName}" : {
      "put" : {
        "tags" : [ "Security management: privileges" ],
        "summary" : "Update a script type privilege.",
        "description" : "",
        "operationId" : "updatePrivilege_5",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "privilegeName",
          "in" : "path",
          "description" : "The name of the privilege to update.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The privilege to update.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ApiPrivilegeScriptRequest"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Privilege object not configured properly."
          },
          "403" : {
            "description" : "The user does not have permission to perform the operation."
          },
          "404" : {
            "description" : "Privilege not found in the system."
          }
        }
      }
    },
    "/v1/security/privileges/script" : {
      "post" : {
        "tags" : [ "Security management: privileges" ],
        "summary" : "Create a script type privilege.",
        "description" : "",
        "operationId" : "createPrivilege_5",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The privilege to create.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ApiPrivilegeScriptRequest"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Privilege object not configured properly."
          },
          "403" : {
            "description" : "The user does not have permission to perform the operation."
          }
        }
      }
    },
    "/v1/script/{name}/run" : {
      "post" : {
        "tags" : [ "Script" ],
        "summary" : "Run stored script by name",
        "description" : "",
        "operationId" : "run_1",
        "consumes" : [ "text/plain", "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ScriptResultXO"
            }
          },
          "404" : {
            "description" : "No script with the specified name"
          },
          "500" : {
            "description" : "Script execution failed with exception"
          }
        }
      }
    },
    "/v1/script" : {
      "get" : {
        "tags" : [ "Script" ],
        "summary" : "List all stored scripts",
        "description" : "",
        "operationId" : "browse",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ScriptXO"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Script" ],
        "summary" : "Add a new script",
        "description" : "",
        "operationId" : "add",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ScriptXO"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Script was added"
          },
          "410" : {
            "description" : "Script creation is disabled"
          }
        }
      }
    },
    "/v1/script/{name}" : {
      "get" : {
        "tags" : [ "Script" ],
        "summary" : "Read stored script by name",
        "description" : "",
        "operationId" : "read",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ScriptXO"
            }
          },
          "404" : {
            "description" : "No script with the specified name"
          }
        }
      },
      "put" : {
        "tags" : [ "Script" ],
        "summary" : "Update stored script by name",
        "description" : "",
        "operationId" : "edit",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ScriptXO"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Script was updated"
          },
          "404" : {
            "description" : "No script with the specified name"
          },
          "410" : {
            "description" : "Script updating is disabled"
          }
        }
      },
      "delete" : {
        "tags" : [ "Script" ],
        "summary" : "Delete stored script by name",
        "description" : "",
        "operationId" : "delete_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Script was deleted"
          },
          "404" : {
            "description" : "No script with the specified name"
          }
        }
      }
    },
    "/v1/security/ldap/change-order" : {
      "post" : {
        "tags" : [ "Security management: LDAP" ],
        "summary" : "Change LDAP server order",
        "description" : "",
        "operationId" : "changeOrder",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Ordered list of LDAP server names",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "LDAP server order changed"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/security/ldap" : {
      "get" : {
        "tags" : [ "Security management: LDAP" ],
        "summary" : "List LDAP servers",
        "description" : "",
        "operationId" : "getLdapServers",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "LDAP server list returned"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      },
      "post" : {
        "tags" : [ "Security management: LDAP" ],
        "summary" : "Create LDAP server",
        "description" : "",
        "operationId" : "createLdapServer",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateLdapServerXo"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "LDAP server created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/security/ldap/{name}" : {
      "get" : {
        "tags" : [ "Security management: LDAP" ],
        "summary" : "Get LDAP server",
        "description" : "",
        "operationId" : "getLdapServer",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the LDAP server to retrieve",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "LDAP server returned"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "LDAP server not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Security management: LDAP" ],
        "summary" : "Update LDAP server",
        "description" : "",
        "operationId" : "updateLdapServer",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the LDAP server to update",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Updated values of LDAP server",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UpdateLdapServerXo"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "LDAP server updated"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "LDAP server not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Security management: LDAP" ],
        "summary" : "Delete LDAP server",
        "description" : "",
        "operationId" : "deleteLdapServer",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the LDAP server to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "LDAP server deleted"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "LDAP server not found"
          }
        }
      }
    },
    "/v1/repositories/docker/group/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_9",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DockerGroupApiRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update Docker group repository",
        "description" : "",
        "operationId" : "updateRepository_8",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DockerGroupRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Repository not found"
          }
        }
      }
    },
    "/v1/repositories/docker/group" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create Docker group repository",
        "description" : "",
        "operationId" : "createRepository_8",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DockerGroupRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/docker/proxy/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_10",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DockerProxyApiRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update Docker proxy repository",
        "description" : "",
        "operationId" : "updateRepository_9",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DockerProxyRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Repository not found"
          }
        }
      }
    },
    "/v1/repositories/docker/proxy" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create Docker proxy repository",
        "description" : "",
        "operationId" : "createRepository_9",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DockerProxyRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/docker/hosted/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_11",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DockerHostedApiRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update Docker hosted repository",
        "description" : "",
        "operationId" : "updateRepository_10",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DockerHostedRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Repository not found"
          }
        }
      }
    },
    "/v1/repositories/docker/hosted" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create Docker hosted repository",
        "description" : "",
        "operationId" : "createRepository_10",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DockerHostedRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Repository not found"
          }
        }
      }
    },
    "/v1/repositories/gitlfs/hosted/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_12",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiHostedRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update Git LFS hosted repository",
        "description" : "",
        "operationId" : "updateRepository_11",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GitLfsHostedRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/gitlfs/hosted" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create Git LFS hosted repository",
        "description" : "",
        "operationId" : "createRepository_11",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GitLfsHostedRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/rubygems/proxy/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_13",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiProxyRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update RubyGems proxy repository",
        "description" : "",
        "operationId" : "updateRepository_12",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RubyGemsProxyRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/rubygems/proxy" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create RubyGems proxy repository",
        "description" : "",
        "operationId" : "createRepository_12",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RubyGemsProxyRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/rubygems/group/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_14",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiGroupRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update RubyGems group repository",
        "description" : "",
        "operationId" : "updateRepository_13",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RubyGemsGroupRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/rubygems/group" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create RubyGems group repository",
        "description" : "",
        "operationId" : "createRepository_13",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RubyGemsGroupRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/rubygems/hosted/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_15",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiHostedRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update RubyGems hosted repository",
        "description" : "",
        "operationId" : "updateRepository_14",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RubyGemsHostedRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/rubygems/hosted" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create RubyGems hosted repository",
        "description" : "",
        "operationId" : "createRepository_14",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RubyGemsHostedRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/yum/proxy/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_16",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiProxyRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update Yum proxy repository",
        "description" : "",
        "operationId" : "updateRepository_15",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/YumProxyRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/yum/proxy" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create Yum proxy repository",
        "description" : "",
        "operationId" : "createRepository_15",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/YumProxyRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/yum/group/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_17",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiGroupRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update Yum group repository",
        "description" : "",
        "operationId" : "updateRepository_16",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/YumGroupRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/yum/group" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create Yum group repository",
        "description" : "",
        "operationId" : "createRepository_16",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/YumGroupRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/yum/hosted/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_18",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/YumHostedApiRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update Yum hosted repository",
        "description" : "",
        "operationId" : "updateRepository_17",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/YumHostedRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/yum/hosted" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create Yum hosted repository",
        "description" : "",
        "operationId" : "createRepository_17",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/YumHostedRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/status/writable" : {
      "get" : {
        "tags" : [ "Status" ],
        "summary" : "Health check endpoint that validates server can respond to read and write requests",
        "description" : "",
        "operationId" : "isWritable",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Available to service requests"
          },
          "503" : {
            "description" : "Unavailable to service requests"
          }
        }
      }
    },
    "/v1/status" : {
      "get" : {
        "tags" : [ "Status" ],
        "summary" : "Health check endpoint that validates server can respond to read requests",
        "description" : "",
        "operationId" : "isAvailable",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Available to service requests"
          },
          "503" : {
            "description" : "Unavailable to service requests"
          }
        }
      }
    },
    "/v1/system/node" : {
      "get" : {
        "tags" : [ "System: Nodes" ],
        "summary" : "Get information about this node",
        "description" : "",
        "operationId" : "getNodeId",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NodeInformation"
            }
          },
          "403" : {
            "description" : "Insufficient permissions to update settings"
          }
        }
      },
      "delete" : {
        "tags" : [ "System: Nodes" ],
        "summary" : "Reset the ID for this node. Takes effect after restart and should only be used when cloning an instance",
        "description" : "",
        "operationId" : "clear",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "403" : {
            "description" : "Insufficient permissions to update settings"
          }
        }
      }
    },
    "/v1/formats/{format}/upload-specs" : {
      "get" : {
        "tags" : [ "Formats" ],
        "summary" : "Get upload field requirements for the desired format",
        "description" : "",
        "operationId" : "get",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "format",
          "in" : "path",
          "description" : "The desired repository format",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UploadDefinitionXO"
            }
          }
        }
      }
    },
    "/v1/formats/upload-specs" : {
      "get" : {
        "tags" : [ "Formats" ],
        "summary" : "Get upload field requirements for each supported format",
        "description" : "",
        "operationId" : "get_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/UploadDefinitionXO"
              }
            }
          }
        }
      }
    },
    "/v1/security/jwt" : {
      "put" : {
        "tags" : [ "Security management: JWT" ],
        "summary" : "Reset JWT secret (note that session will be expired for the all logged-in users)",
        "description" : "",
        "operationId" : "resetSecret",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/apikeys/encryption/re-encrypt" : {
      "put" : {
        "tags" : [ "Security management: api keys principals encryption" ],
        "summary" : "Re-encrypt api keys principals using the specified configuration",
        "description" : "Ensure all nodes have access to the key, and they use the same key",
        "operationId" : "reEncrypt",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ApiKeysReEncryptionRequestApiXO"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Re-encrypt task successfully submitted"
          },
          "400" : {
            "description" : "Invalid request. See the response for more information. Possible causes: The key is not available to all nodes, upgrade needed or empty key id."
          },
          "403" : {
            "description" : "Insufficient permissions to re-encrypt secrets"
          },
          "409" : {
            "description" : "Re-encryption task in progress."
          }
        }
      }
    },
    "/v1/system/eula" : {
      "get" : {
        "tags" : [ "Community Edition Eula" ],
        "summary" : "Get the current Community Eula status.",
        "description" : "",
        "operationId" : "getCommunityEulaStatus",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "examples" : {
              "application/json" : {
                "disclaimer" : "Use of Sonatype Nexus Repository - Community Edition is governed by the End User License Agreement at https://links.sonatype.com/products/nxrm/ce-eula. By returning the value from ‘accepted:false’ to ‘accepted:true’, you acknowledge that you have read and agree to the End User License Agreement at https://links.sonatype.com/products/nxrm/ce-eula.",
                "accepted" : false
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Community Edition Eula" ],
        "summary" : "Set the Community Eula status.",
        "description" : "",
        "operationId" : "setEulaAcceptedCE",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EulaStatus"
          },
          "x-examples" : {
            "application/json" : "{\"disclaimer\": \"Use of Sonatype Nexus Repository - Community Edition is governed by the End User License Agreement at https://links.sonatype.com/products/nxrm/ce-eula. By returning the value from ‘accepted:false’ to ‘accepted:true’, you acknowledge that you have read and agree to the End User License Agreement at https://links.sonatype.com/products/nxrm/ce-eula.\", \"accepted\": true}"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "EULA status set successfully"
          },
          "500" : {
            "description" : "Incorrect EULA Status"
          }
        }
      }
    },
    "/v1/security/anonymous" : {
      "get" : {
        "tags" : [ "Security Management: Anonymous Access" ],
        "summary" : "Get Anonymous Access settings",
        "description" : "",
        "operationId" : "read_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AnonymousAccessSettingsXO"
            }
          },
          "403" : {
            "description" : "Insufficient permissions to update settings"
          }
        }
      },
      "put" : {
        "tags" : [ "Security Management: Anonymous Access" ],
        "summary" : "Update Anonymous Access settings",
        "description" : "",
        "operationId" : "update_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AnonymousAccessSettingsXO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AnonymousAccessSettingsXO"
            }
          },
          "403" : {
            "description" : "Insufficient permissions to update settings"
          }
        }
      }
    },
    "/v1/security/user-sources" : {
      "get" : {
        "tags" : [ "Security management" ],
        "summary" : "Retrieve a list of the available user sources.",
        "description" : "",
        "operationId" : "getUserSources",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ApiUserSource"
              }
            }
          },
          "403" : {
            "description" : "The user does not have permission to perform the operation."
          }
        }
      }
    },
    "/v1/secrets/encryption/re-encrypt" : {
      "put" : {
        "tags" : [ "Security management: secrets encryption" ],
        "summary" : "Re-encrypt secrets using the specified key",
        "description" : "Ensure all nodes have access to the key, and they use the same key",
        "operationId" : "reEncrypt_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ReEncryptionRequestApiXO"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Re-encrypt task successfully submitted"
          },
          "400" : {
            "description" : "Invalid request. See the response for more information. Possible causes: The key is not available to all nodes, upgrade needed or empty key id."
          },
          "403" : {
            "description" : "Insufficient permissions to re-encrypt secrets"
          },
          "409" : {
            "description" : "Re-encryption task in progress."
          }
        }
      }
    },
    "/v1/security/realms/available" : {
      "get" : {
        "tags" : [ "Security management: realms" ],
        "summary" : "List the available realms",
        "description" : "",
        "operationId" : "getRealms",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/RealmApiXO"
              }
            }
          }
        }
      }
    },
    "/v1/security/realms/active" : {
      "get" : {
        "tags" : [ "Security management: realms" ],
        "summary" : "List the active realm IDs in order",
        "description" : "",
        "operationId" : "getActiveRealms",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Security management: realms" ],
        "summary" : "Set the active security realms in the order they should be used",
        "description" : "",
        "operationId" : "setActiveRealms",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The realm IDs",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/support/supportzip" : {
      "post" : {
        "tags" : [ "Support" ],
        "summary" : "Creates and downloads a support zip",
        "description" : "",
        "operationId" : "supportzip",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/octet-stream" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SupportZipGeneratorRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          },
          "403" : {
            "description" : "Insufficient permissions to generate support zip"
          }
        }
      }
    },
    "/v1/support/supportzippath" : {
      "post" : {
        "tags" : [ "Support" ],
        "summary" : "Creates a support zip and returns the path",
        "description" : "",
        "operationId" : "supportzippath",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SupportZipGeneratorRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          },
          "403" : {
            "description" : "Insufficient permissions to generate support zip"
          }
        }
      }
    },
    "/v1/blobstores" : {
      "get" : {
        "tags" : [ "Blob store" ],
        "summary" : "List the blob stores",
        "description" : "",
        "operationId" : "listBlobStores",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/GenericBlobStoreApiResponse"
              }
            }
          }
        }
      }
    },
    "/v1/blobstores/{name}/quota-status" : {
      "get" : {
        "tags" : [ "Blob store" ],
        "summary" : "Get quota status for a given blob store",
        "description" : "",
        "operationId" : "quotaStatus",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/BlobStoreQuotaResultXO"
            }
          }
        }
      }
    },
    "/v1/blobstores/{name}" : {
      "delete" : {
        "tags" : [ "Blob store" ],
        "summary" : "Delete a blob store by name",
        "description" : "",
        "operationId" : "deleteBlobStore",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the blob store to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/blobstores/file" : {
      "post" : {
        "tags" : [ "Blob store" ],
        "summary" : "Create a file blob store",
        "description" : "",
        "operationId" : "createFileBlobStore",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/FileBlobStoreApiCreateRequest"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/blobstores/file/{name}" : {
      "get" : {
        "tags" : [ "Blob store" ],
        "summary" : "Get a file blob store configuration by name",
        "description" : "",
        "operationId" : "getFileBlobStoreConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the file blob store to read",
          "required" : true,
          "type" : "string",
          "x-example" : "default"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/FileBlobStoreApiModel"
            }
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Blob store not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Blob store" ],
        "summary" : "Update a file blob store configuration by name",
        "description" : "",
        "operationId" : "updateFileBlobStore",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the file blob store to update",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/FileBlobStoreApiUpdateRequest"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Blob store not found"
          }
        }
      }
    },
    "/v1/blobstores/s3/{name}" : {
      "get" : {
        "tags" : [ "Blob store" ],
        "summary" : "Get a S3 blob store configuration by name",
        "description" : "",
        "operationId" : "getBlobStore",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the blob store configuration to fetch",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/S3BlobStoreApiModel"
            }
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Specified S3 blob store doesn't exist"
          }
        }
      },
      "put" : {
        "tags" : [ "Blob store" ],
        "summary" : "Update an S3 blob store configuration by name",
        "description" : "",
        "operationId" : "updateBlobStore",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/S3BlobStoreApiModel"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the blob store to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "S3 blob store updated"
          },
          "400" : {
            "description" : "Specified S3 blob store doesn't exist"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/blobstores/s3" : {
      "post" : {
        "tags" : [ "Blob store" ],
        "summary" : "Create an S3 blob store",
        "description" : "",
        "operationId" : "createBlobStore",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/S3BlobStoreApiModel"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "S3 blob store created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/security/users/{userId}/change-password" : {
      "put" : {
        "tags" : [ "Security management: users" ],
        "summary" : "Change a user's password.",
        "description" : "",
        "operationId" : "changePassword",
        "consumes" : [ "text/plain" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The userid the request should apply to.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The new password to use.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Password was not supplied in the body of the request"
          },
          "403" : {
            "description" : "The user does not have permission to perform the operation."
          },
          "404" : {
            "description" : "User not found in the system."
          }
        }
      }
    },
    "/beta/system/information" : {
      "get" : {
        "tags" : [ "System: Nodes" ],
        "summary" : "Get information about all nodes",
        "description" : "",
        "operationId" : "getSystemInformation",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "System information for all running nodes grouped by nodeID"
          },
          "403" : {
            "description" : "Insufficient permissions to request this data"
          }
        }
      }
    },
    "/v1/email" : {
      "get" : {
        "tags" : [ "Email" ],
        "summary" : "Retrieve the current email configuration",
        "description" : "",
        "operationId" : "getEmailConfiguration",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiEmailConfiguration"
            }
          },
          "403" : {
            "description" : "Insufficient permissions to retrieve the email configuration"
          }
        }
      },
      "put" : {
        "tags" : [ "Email" ],
        "summary" : "Set the current email configuration",
        "description" : "",
        "operationId" : "setEmailConfiguration",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ApiEmailConfiguration"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Email configuration was successfully updated"
          },
          "400" : {
            "description" : "Invalid request"
          },
          "403" : {
            "description" : "Insufficient permissions to update the email configuration"
          }
        }
      },
      "delete" : {
        "tags" : [ "Email" ],
        "summary" : "Disable and clear the email configuration",
        "description" : "",
        "operationId" : "deleteEmailConfiguration",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "Email configuration was successfully cleared"
          }
        }
      }
    },
    "/v1/email/verify" : {
      "post" : {
        "tags" : [ "Email" ],
        "summary" : "Send a test email to the email address provided in the request body",
        "description" : "",
        "operationId" : "testEmailConfiguration",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "An email address to send a test email to",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Validation was complete, look at the body to determine success",
            "schema" : {
              "$ref" : "#/definitions/ApiEmailValidation"
            }
          },
          "403" : {
            "description" : "Insufficient permissions to verify the email configuration"
          }
        }
      }
    },
    "/v1/read-only" : {
      "get" : {
        "tags" : [ "Read-only" ],
        "summary" : "Get read-only state",
        "description" : "",
        "operationId" : "get_2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ReadOnlyState"
            }
          }
        }
      }
    },
    "/v1/read-only/release" : {
      "post" : {
        "tags" : [ "Read-only" ],
        "summary" : "Release read-only and allow changes to the database",
        "description" : "Releases administrator-initiated read-only status. Will not release read-only status caused by system tasks.",
        "operationId" : "release",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "Database is no longer read-only"
          },
          "403" : {
            "description" : "Authentication required"
          },
          "404" : {
            "description" : "No change to read-only state"
          }
        }
      }
    },
    "/v1/read-only/freeze" : {
      "post" : {
        "tags" : [ "Read-only" ],
        "summary" : "Prevent changes to the database",
        "description" : "For low-level system maintenance purposes only; do not use if you want users to still be able to download components.",
        "operationId" : "freeze",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "Database is now read-only"
          },
          "403" : {
            "description" : "Authentication required"
          },
          "404" : {
            "description" : "No change to read-only state"
          }
        }
      }
    },
    "/v1/read-only/force-release" : {
      "post" : {
        "tags" : [ "Read-only" ],
        "summary" : "Forcibly release read-only and allow changes to the database",
        "description" : "Forcibly release read-only status, including if caused by system tasks. Warning: may result in data loss.",
        "operationId" : "forceRelease",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "Database is no longer read-only"
          },
          "403" : {
            "description" : "Authentication required"
          },
          "404" : {
            "description" : "No change to read-only state"
          }
        }
      }
    },
    "/v1/lifecycle/bounce" : {
      "put" : {
        "tags" : [ "Lifecycle" ],
        "summary" : "Bounce lifecycle phase",
        "description" : "Re-runs all phases from the given phase to the current phase",
        "operationId" : "bounce",
        "consumes" : [ "text/plain" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The phase to bounce",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/lifecycle/phase" : {
      "get" : {
        "tags" : [ "Lifecycle" ],
        "summary" : "Get current lifecycle phase",
        "description" : "",
        "operationId" : "getPhase",
        "produces" : [ "text/plain" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Lifecycle" ],
        "summary" : "Move to new lifecycle phase",
        "description" : "",
        "operationId" : "setPhase",
        "consumes" : [ "text/plain" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The phase to move to",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/status/check" : {
      "get" : {
        "tags" : [ "Status" ],
        "summary" : "Health check endpoint that returns the results of the system status checks",
        "description" : "",
        "operationId" : "getSystemStatusChecks",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The system status check results",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "$ref" : "#/definitions/Result"
              }
            }
          }
        }
      }
    },
    "/v1/tasks/templates" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "List tasks of template tasks. This is the base to create new tasks",
        "description" : "",
        "operationId" : "getTaskTemplates",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TaskTemplateXO"
              }
            }
          }
        }
      }
    },
    "/v1/tasks/templates/{typeId}" : {
      "get" : {
        "tags" : [ "Tasks" ],
        "summary" : "Get task template by type. This is the base to create new tasks",
        "description" : "",
        "operationId" : "getTaskTemplate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "typeId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TaskTemplateXO"
            }
          }
        }
      }
    },
    "/v1/tasks/{taskId}" : {
      "put" : {
        "tags" : [ "Tasks" ],
        "summary" : "Update an existing task",
        "description" : "",
        "operationId" : "updateTask",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/TaskTemplateXO"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/iq/audit" : {
      "get" : {
        "tags" : [ "Manage Sonatype Repository Firewall configuration" ],
        "summary" : "List repositories audit statuses.",
        "description" : "",
        "operationId" : "getAllAuditStatus",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful Operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/IqAuditXo"
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Manage Sonatype Repository Firewall configuration" ],
        "summary" : "Manage audit",
        "description" : "",
        "operationId" : "manageAudit",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/IqAuditXo"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Given repository is not a proxy"
          },
          "404" : {
            "description" : "Given repository not found"
          },
          "204" : {
            "description" : "Repository audit is successfully updated"
          }
        }
      }
    },
    "/v1/iq/audit/{repositoryName}" : {
      "get" : {
        "tags" : [ "Manage Sonatype Repository Firewall configuration" ],
        "summary" : "Get audit status for the repository",
        "description" : "",
        "operationId" : "getAuditStatus",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "404" : {
            "description" : "Given repository not found"
          },
          "400" : {
            "description" : "Given repository is not a proxy"
          }
        }
      }
    },
    "/v1/cleanup-policies/{policyName}" : {
      "put" : {
        "tags" : [ "Cleanup policies" ],
        "summary" : "Update existing policy",
        "description" : "",
        "operationId" : "update_2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "policyName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CleanupPolicyResourceXO"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Given payload has invalid data"
          },
          "404" : {
            "description" : "Given policy name does not exist"
          },
          "204" : {
            "description" : "Policy was successfully updated"
          }
        }
      }
    },
    "/v1/cleanup-policies" : {
      "get" : {
        "tags" : [ "Cleanup policies" ],
        "summary" : "Get a list of existing policies",
        "description" : "",
        "operationId" : "getAll",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The list of existing policies"
          }
        }
      },
      "post" : {
        "tags" : [ "Cleanup policies" ],
        "summary" : "Create a new policy",
        "description" : "",
        "operationId" : "create_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CleanupPolicyResourceXO"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Given payload has invalid data"
          },
          "409" : {
            "description" : "Given policy name already exists"
          },
          "201" : {
            "description" : "Policy was successfully created"
          }
        }
      }
    },
    "/v1/cleanup-policies/{name}" : {
      "get" : {
        "tags" : [ "Cleanup policies" ],
        "summary" : "Get a policy by name",
        "description" : "",
        "operationId" : "getCleanupPolicyByName",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Policy if exists"
          }
        }
      },
      "delete" : {
        "tags" : [ "Cleanup policies" ],
        "summary" : "Delete cleanup policy",
        "description" : "",
        "operationId" : "deletePolicyByName",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "404" : {
            "description" : "The policy with the given name not found"
          },
          "204" : {
            "description" : "Given policy successfully deleted"
          }
        }
      }
    },
    "/v1/plan/details" : {
      "get" : {
        "tags" : [ "Reconcile Plan" ],
        "summary" : "Get reconciliation plan details",
        "description" : "",
        "operationId" : "getPlanDetails",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "planId",
          "in" : "query",
          "description" : "Id of the plan",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "state",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repository",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "continuationToken",
          "in" : "query",
          "description" : "A token returned by a prior request. If present, the next page of results are returned",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Reconciliation plan details found"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/plan" : {
      "get" : {
        "tags" : [ "Reconcile Plan" ],
        "summary" : "Get list of currently available plans",
        "description" : "",
        "operationId" : "getAvailablePlans",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "continuationToken",
          "in" : "query",
          "description" : "A token returned by a prior request. If present, the next page of results are returned",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of plans found"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      },
      "post" : {
        "tags" : [ "Reconcile Plan" ],
        "summary" : "Create reconciliation plans with selected parameters",
        "description" : "",
        "operationId" : "createReconciliationPlans",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositories",
          "in" : "query",
          "description" : "repository(ies) which should be processed with high priority",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "allowEmptyValue" : true
        }, {
          "name" : "blobStores",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "allowEmptyValue" : true
        }, {
          "name" : "startDate",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "endDate",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sinceDays",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "sinceHours",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "sinceMinutes",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 30,
          "format" : "int32"
        } ],
        "responses" : {
          "204" : {
            "description" : "Reconciliation plans created and executed"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Reconciliation plan not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Reconcile Plan" ],
        "summary" : "Execute all non executed reconciliation plans",
        "description" : "",
        "operationId" : "executeReconcileTasks",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "Reconciliation plans executed"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Reconciliation plan not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Reconcile Plan" ],
        "summary" : "Delete all non executed reconciliation plans",
        "description" : "",
        "operationId" : "deleteAllPlans",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "Reconciliation plans deleted"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Plan not found"
          }
        }
      }
    },
    "/v1/plan/{planId}" : {
      "get" : {
        "tags" : [ "Reconcile Plan" ],
        "summary" : "Get single reconciliation plan with details",
        "description" : "",
        "operationId" : "getSinglePlanWithDetails",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "planId",
          "in" : "path",
          "description" : "Id of the plan",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "repository",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "continuationToken",
          "in" : "query",
          "description" : "A token returned by a prior request. If present, the next page of results are returned",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Reconciliation plan found"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      },
      "put" : {
        "tags" : [ "Reconcile Plan" ],
        "summary" : "Execute a reconciliation plan based on its Id",
        "description" : "",
        "operationId" : "executeReconcileTaskById",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "planId",
          "in" : "path",
          "description" : "Id of the plan to execute",
          "required" : true,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "204" : {
            "description" : "Reconciliation plans executed"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Reconciliation plan not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Reconcile Plan" ],
        "summary" : "Delete a reconciliation plan based on its Id",
        "description" : "",
        "operationId" : "deletePlan",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "planId",
          "in" : "path",
          "description" : "Id of the plan to delete",
          "required" : true,
          "type" : "integer",
          "readOnly" : true,
          "format" : "int32"
        } ],
        "responses" : {
          "204" : {
            "description" : "Reconciliation plan deleted"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Plan not found"
          }
        }
      }
    },
    "/v1/security/atlassian-crowd/clear-cache" : {
      "post" : {
        "tags" : [ "Security: Atlassian Crowd" ],
        "summary" : "Clear Atlassian Crowd cache",
        "description" : "",
        "operationId" : "clearCache",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "Atlassian Crowd cache has been cleared"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/security/atlassian-crowd/verify-connection" : {
      "post" : {
        "tags" : [ "Security: Atlassian Crowd" ],
        "summary" : "Verify connection using supplied Atlassian Crowd settings",
        "description" : "",
        "operationId" : "verifyConnection",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CrowdApiXO"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Atlassian Crowd connection was successful"
          },
          "400" : {
            "description" : "Atlassian Crowd connection failed"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/security/atlassian-crowd" : {
      "get" : {
        "tags" : [ "Security: Atlassian Crowd" ],
        "summary" : "Retrieve Atlassian Crowd settings configured in Nexus Repository Manager",
        "description" : "",
        "operationId" : "readSettings",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Atlassian Crowd settings returned"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      },
      "put" : {
        "tags" : [ "Security: Atlassian Crowd" ],
        "summary" : "Update Atlassian Crowd settings configured in Nexus Repository Manager",
        "description" : "",
        "operationId" : "updateSettings",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CrowdApiXO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Atlassian Crowd settings updated"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/clustered/upgrade-database-schema" : {
      "get" : {
        "tags" : [ "Database Upgrade" ],
        "summary" : "Check the progress of a database schema upgrade",
        "description" : "",
        "operationId" : "getProgress",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "See the response body for database schema upgrade details.",
            "schema" : {
              "$ref" : "#/definitions/ApiClusterDatabaseMigrationResultDTO"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Database Upgrade" ],
        "summary" : "Begins a database schema upgrade",
        "description" : "",
        "operationId" : "migrate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "The responding node was able to start database schema upgrade"
          },
          "400" : {
            "description" : "The cluster is not able to start the database schema upgrade; see the response for details"
          },
          "500" : {
            "description" : "An internal error occurred"
          }
        }
      },
      "delete" : {
        "tags" : [ "Database Upgrade" ],
        "summary" : "Clears a stored database schema upgrade success or a recoverable error",
        "description" : "",
        "operationId" : "clearResult",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "An error was successfully cleared or no errors were stored."
          },
          "400" : {
            "description" : "An error exists which cannot be cleared. Contact support for assistance."
          }
        }
      }
    },
    "/v1/repositories/{repositoryName}/health-check" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Enable repository health check. Proxy repositories only.",
        "description" : "",
        "operationId" : "enableRepositoryHealthCheck",
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to enable Repository Health Check for",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository Health Check enabled"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Repository not found"
          },
          "409" : {
            "description" : "EULA not accepted or Repository Health Check capability not active"
          }
        }
      },
      "delete" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Disable repository health check. Proxy repositories only.",
        "description" : "",
        "operationId" : "disableRepositoryHealthCheck",
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to disable Repository Health Check for",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository Health Check disabled"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Repository not found"
          }
        }
      }
    },
    "/v1/system/license" : {
      "get" : {
        "tags" : [ "Product licensing" ],
        "summary" : "Get the current license status.",
        "description" : "",
        "operationId" : "getLicenseStatus",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiLicenseDetailsXO"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Product licensing" ],
        "summary" : "Upload a new license file.",
        "description" : "Server must be restarted to take effect",
        "operationId" : "setLicense",
        "consumes" : [ "application/octet-stream" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/InputStream"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiLicenseDetailsXO"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Product licensing" ],
        "summary" : "Uninstall license if present.",
        "description" : "",
        "operationId" : "removeLicense",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/beta/data-store" : {
      "get" : {
        "tags" : [ "Data Store" ],
        "summary" : "Get the data store",
        "description" : "",
        "operationId" : "getDataStore",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Data Store configuration returned"
          },
          "403" : {
            "description" : "Authentication required"
          }
        }
      },
      "put" : {
        "tags" : [ "Data Store" ],
        "summary" : "Update the data store",
        "description" : "",
        "operationId" : "updateDataStore",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DataStoreApiUpdateXO"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Data Store configuration updated"
          },
          "400" : {
            "description" : "Update Failed"
          },
          "403" : {
            "description" : "Authentication required"
          }
        }
      }
    },
    "/v1/repositories/cargo/hosted/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_19",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiHostedRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update cargo hosted repository",
        "description" : "",
        "operationId" : "updateRepository_18",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CargoHostedRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/cargo/hosted" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create cargo hosted repository",
        "description" : "",
        "operationId" : "createRepository_18",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CargoHostedRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/cargo/proxy/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_20",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CargoProxyApiRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update cargo proxy repository",
        "description" : "",
        "operationId" : "updateRepository_19",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CargoProxyRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/cargo/proxy" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create cargo proxy repository",
        "description" : "",
        "operationId" : "createRepository_19",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CargoProxyRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/cargo/group/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_21",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CargoGroupApiRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update cargo group repository",
        "description" : "",
        "operationId" : "updateRepository_20",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CargoGroupRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/cargo/group" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create cargo group repository",
        "description" : "",
        "operationId" : "createRepository_20",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CargoGroupRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/cocoapods/proxy/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_22",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiProxyRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update Cocoapods proxy repository",
        "description" : "",
        "operationId" : "updateRepository_21",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CocoapodsProxyRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/cocoapods/proxy" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create Cocoapods proxy repository",
        "description" : "",
        "operationId" : "createRepository_21",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CocoapodsProxyRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "405" : {
            "description" : "Feature is disabled in High Availability"
          }
        }
      }
    },
    "/v1/repositories/composer/proxy/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_23",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiProxyRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update composer proxy repository",
        "description" : "",
        "operationId" : "updateRepository_22",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ComposerProxyRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/composer/proxy" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create composer proxy repository",
        "description" : "",
        "operationId" : "createRepository_22",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ComposerProxyRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/conan/proxy/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_24",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiProxyRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update Conan proxy repository",
        "description" : "",
        "operationId" : "updateRepository_23",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ConanProxyRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Repository not found"
          }
        }
      }
    },
    "/v1/repositories/conan/proxy" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create Conan proxy repository",
        "description" : "",
        "operationId" : "createRepository_23",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ConanProxyRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "405" : {
            "description" : "Feature is disabled in High Availability"
          }
        }
      }
    },
    "/v1/repositories/conan/group/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_25",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiGroupRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update Conan group repository",
        "description" : "",
        "operationId" : "updateRepository_24",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ConanGroupRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/conan/group" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create Conan group repository",
        "description" : "",
        "operationId" : "createRepository_24",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ConanGroupRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/conan/hosted/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_26",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiHostedRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update Conan hosted repository",
        "description" : "",
        "operationId" : "updateRepository_25",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ConanHostedRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Repository not found"
          }
        }
      }
    },
    "/v1/repositories/conan/hosted" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create Conan hosted repository",
        "description" : "",
        "operationId" : "createRepository_25",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ConanHostedRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/conda/proxy/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_27",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiProxyRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update conda proxy repository",
        "description" : "",
        "operationId" : "updateRepository_26",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CondaProxyRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/conda/proxy" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create conda proxy repository",
        "description" : "",
        "operationId" : "createRepository_26",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CondaProxyRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "405" : {
            "description" : "Feature is disabled in High Availability"
          }
        }
      }
    },
    "/v1/repositories/go/group/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_28",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiGroupRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update a Go group repository",
        "description" : "",
        "operationId" : "updateRepository_27",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GolangGroupRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Repository not found"
          }
        }
      }
    },
    "/v1/repositories/go/group" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create a Go group repository",
        "description" : "",
        "operationId" : "createRepository_27",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GolangGroupRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "405" : {
            "description" : "Feature is disabled in High Availability"
          }
        }
      }
    },
    "/v1/repositories/go/proxy/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_29",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiProxyRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update a Go proxy repository",
        "description" : "",
        "operationId" : "updateRepository_28",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GolangProxyRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Repository not found"
          }
        }
      }
    },
    "/v1/repositories/go/proxy" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create a Go proxy repository",
        "description" : "",
        "operationId" : "createRepository_28",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GolangProxyRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "405" : {
            "description" : "Feature is disabled in High Availability"
          }
        }
      }
    },
    "/v1/repositories/helm/proxy/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_30",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiProxyRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update Helm proxy repository",
        "description" : "",
        "operationId" : "updateRepository_29",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HelmProxyRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/helm/proxy" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create Helm proxy repository",
        "description" : "",
        "operationId" : "createRepository_29",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HelmProxyRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "405" : {
            "description" : "Feature is disabled in High Availability"
          }
        }
      }
    },
    "/v1/repositories/helm/hosted/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_31",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiHostedRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update Helm hosted repository",
        "description" : "",
        "operationId" : "updateRepository_30",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HelmHostedRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/helm/hosted" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create Helm hosted repository",
        "description" : "",
        "operationId" : "createRepository_30",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HelmHostedRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "405" : {
            "description" : "Feature is disabled in High Availability"
          }
        }
      }
    },
    "/v1/repositories/huggingface/proxy/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_32",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiProxyRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update huggingface proxy repository",
        "description" : "",
        "operationId" : "updateRepository_31",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HuggingFaceProxyRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/huggingface/proxy" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create huggingface proxy repository",
        "description" : "",
        "operationId" : "createRepository_31",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HuggingFaceProxyRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/npm/hosted/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_33",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiHostedRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update npm hosted repository",
        "description" : "",
        "operationId" : "updateRepository_32",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NpmHostedRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/npm/hosted" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create npm hosted repository",
        "description" : "",
        "operationId" : "createRepository_32",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NpmHostedRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/npm/proxy/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_34",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NpmProxyApiRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update npm proxy repository",
        "description" : "",
        "operationId" : "updateRepository_33",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NpmProxyRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/npm/proxy" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create npm proxy repository",
        "description" : "",
        "operationId" : "createRepository_33",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NpmProxyRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/npm/group/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_35",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiGroupDeployRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update npm group repository",
        "description" : "",
        "operationId" : "updateRepository_34",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NpmGroupRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/npm/group" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create npm group repository",
        "description" : "",
        "operationId" : "createRepository_34",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NpmGroupRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/nuget/group/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_36",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiGroupRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update NuGet group repository",
        "description" : "",
        "operationId" : "updateRepository_35",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NugetGroupRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/nuget/group" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create NuGet group repository",
        "description" : "",
        "operationId" : "createRepository_35",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NugetGroupRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/nuget/hosted/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_37",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiHostedRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update NuGet hosted repository",
        "description" : "",
        "operationId" : "updateRepository_36",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NugetHostedRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/nuget/hosted" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create NuGet hosted repository",
        "description" : "",
        "operationId" : "createRepository_36",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NugetHostedRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/nuget/proxy/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_38",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NugetProxyApiRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update NuGet proxy repository",
        "description" : "",
        "operationId" : "updateRepository_37",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NugetProxyRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/nuget/proxy" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create NuGet proxy repository",
        "description" : "",
        "operationId" : "createRepository_37",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NugetProxyRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/p2/proxy/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_39",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiProxyRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update p2 proxy repository",
        "description" : "",
        "operationId" : "updateRepository_38",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/P2ProxyRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/p2/proxy" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create p2 proxy repository",
        "description" : "",
        "operationId" : "createRepository_38",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/P2ProxyRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "405" : {
            "description" : "Feature is disabled in High Availability"
          }
        }
      }
    },
    "/v1/repositories/pypi/hosted/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_40",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiHostedRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update PyPI hosted repository",
        "description" : "",
        "operationId" : "updateRepository_39",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PypiHostedRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/pypi/hosted" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create PyPI hosted repository",
        "description" : "",
        "operationId" : "createRepository_39",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PypiHostedRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/pypi/group/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_41",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiGroupRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update PyPI group repository",
        "description" : "",
        "operationId" : "updateRepository_40",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PypiGroupRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/pypi/group" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create PyPI group repository",
        "description" : "",
        "operationId" : "createRepository_40",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PypiGroupRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/pypi/proxy/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_42",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiProxyRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update PyPI proxy repository",
        "description" : "",
        "operationId" : "updateRepository_41",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PypiProxyRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/pypi/proxy" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create PyPI proxy repository",
        "description" : "",
        "operationId" : "createRepository_41",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PypiProxyRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/r/proxy/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_43",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiProxyRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update R proxy repository",
        "description" : "",
        "operationId" : "updateRepository_42",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RProxyRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Repository not found"
          }
        }
      }
    },
    "/v1/repositories/r/proxy" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create R proxy repository",
        "description" : "",
        "operationId" : "createRepository_42",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RProxyRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "405" : {
            "description" : "Feature is disabled in High Availability"
          }
        }
      }
    },
    "/v1/repositories/r/group/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_44",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiGroupRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update R group repository",
        "description" : "",
        "operationId" : "updateRepository_43",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RGroupRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/r/group" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create R group repository",
        "description" : "",
        "operationId" : "createRepository_43",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RGroupRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "405" : {
            "description" : "Feature is disabled in High Availability"
          }
        }
      }
    },
    "/v1/repositories/r/hosted/{repositoryName}" : {
      "get" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Get repository",
        "description" : "",
        "operationId" : "getRepository_45",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "repositoryName",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SimpleApiHostedRepository"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Update R hosted repository",
        "description" : "",
        "operationId" : "updateRepository_44",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RHostedRepositoryApiRequest"
          }
        }, {
          "name" : "repositoryName",
          "in" : "path",
          "description" : "Name of the repository to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Repository updated"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/repositories/r/hosted" : {
      "post" : {
        "tags" : [ "Repository Management" ],
        "summary" : "Create R hosted repository",
        "description" : "",
        "operationId" : "createRepository_44",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RHostedRepositoryApiRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Repository created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "405" : {
            "description" : "Feature is disabled in High Availability"
          }
        }
      }
    },
    "/v1/security/saml/metadata" : {
      "get" : {
        "tags" : [ "Security management: SAML" ],
        "summary" : "Get service provider metadata XML document",
        "description" : "",
        "operationId" : "getMetadata",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/xml" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Metadata Returned"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "404" : {
            "description" : "Metadata not found"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/security/saml" : {
      "get" : {
        "tags" : [ "Security management: SAML" ],
        "summary" : "Get SAML configuration",
        "description" : "",
        "operationId" : "getSamlConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "SAML configuration returned"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "SAML configuration not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Security management: SAML" ],
        "summary" : "Create or update SAML configuration",
        "description" : "",
        "operationId" : "putSamlConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SamlConfigurationXO"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "SAML configuration created"
          },
          "204" : {
            "description" : "SAML configuration updated"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "SAML configuration not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Security management: SAML" ],
        "summary" : "Delete SAML configuration",
        "description" : "",
        "operationId" : "deleteSamlConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "SAML configuration deleted"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/security/saml/pem" : {
      "get" : {
        "tags" : [ "Security management: SAML" ],
        "summary" : "Get service provider signing or decryption certificate in PEM format",
        "description" : "",
        "operationId" : "getPublicCertificateInPemFormat",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/x-pem-file" ],
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "Type of certificate to return: 'signing' or 'decryption'. Defaults to 'signing' if not provided.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "PEM file Returned"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "404" : {
            "description" : "PEM file not found"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/staging/delete" : {
      "post" : {
        "tags" : [ "Staging" ],
        "summary" : "Delete components",
        "description" : "",
        "operationId" : "delete_2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "q",
          "in" : "query",
          "description" : "Query by keyword",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repository",
          "in" : "query",
          "description" : "Repository name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "format",
          "in" : "query",
          "description" : "Query by format",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group",
          "in" : "query",
          "description" : "Component group",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Component name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Component version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "prerelease",
          "in" : "query",
          "description" : "Prerelease version flag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "md5",
          "in" : "query",
          "description" : "Specific MD5 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sha1",
          "in" : "query",
          "description" : "Specific SHA-1 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sha256",
          "in" : "query",
          "description" : "Specific SHA-256 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sha512",
          "in" : "query",
          "description" : "Specific SHA-512 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "composer.vendor",
          "in" : "query",
          "description" : "Vendor",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "composer.package",
          "in" : "query",
          "description" : "Package",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "composer.version",
          "in" : "query",
          "description" : "Version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.baseVersion",
          "in" : "query",
          "description" : "Conan base version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.channel",
          "in" : "query",
          "description" : "Conan channel",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.revision",
          "in" : "query",
          "description" : "Conan recipe revision",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.packageId",
          "in" : "query",
          "description" : "Conan package id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.packageRevision",
          "in" : "query",
          "description" : "Conan package revision",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.baseVersion.strict",
          "in" : "query",
          "description" : "Conan base version strict",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.revision.latest",
          "in" : "query",
          "description" : "Return latest revision",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.arch",
          "in" : "query",
          "description" : "Conan arch",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.os",
          "in" : "query",
          "description" : "Conan os",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.compiler",
          "in" : "query",
          "description" : "Conan compiler",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.compiler.version",
          "in" : "query",
          "description" : "Conan compiler version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.compiler.runtime",
          "in" : "query",
          "description" : "Conan compiler runtime",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.imageName",
          "in" : "query",
          "description" : "Docker image name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.imageTag",
          "in" : "query",
          "description" : "Docker image tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.layerId",
          "in" : "query",
          "description" : "Docker layer ID",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.contentDigest",
          "in" : "query",
          "description" : "Docker content digest",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.groupId",
          "in" : "query",
          "description" : "Maven groupId",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.artifactId",
          "in" : "query",
          "description" : "Maven artifactId",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.baseVersion",
          "in" : "query",
          "description" : "Maven base version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.extension",
          "in" : "query",
          "description" : "Maven extension of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.classifier",
          "in" : "query",
          "description" : "Maven classifier of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "gavec",
          "in" : "query",
          "description" : "Group asset version extension classifier",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.scope",
          "in" : "query",
          "description" : "npm scope",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.author",
          "in" : "query",
          "description" : "npm author",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.description",
          "in" : "query",
          "description" : "npm description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.keywords",
          "in" : "query",
          "description" : "npm keywords",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.license",
          "in" : "query",
          "description" : "npm license",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.tagged_is",
          "in" : "query",
          "description" : "npm tagged is",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.tagged_not",
          "in" : "query",
          "description" : "npm tagged not",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.id",
          "in" : "query",
          "description" : "NuGet id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.tags",
          "in" : "query",
          "description" : "NuGet tags",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.title",
          "in" : "query",
          "description" : "NuGet title",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.authors",
          "in" : "query",
          "description" : "NuGet authors",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.description",
          "in" : "query",
          "description" : "NuGet description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.summary",
          "in" : "query",
          "description" : "NuGet summary",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.is_prerelease",
          "in" : "query",
          "description" : "NuGet prerelease",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "p2.pluginName",
          "in" : "query",
          "description" : "p2 plugin name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.classifiers",
          "in" : "query",
          "description" : "PyPI classifiers",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.description",
          "in" : "query",
          "description" : "PyPI description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.keywords",
          "in" : "query",
          "description" : "PyPI keywords",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.summary",
          "in" : "query",
          "description" : "PyPI summary",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rubygems.description",
          "in" : "query",
          "description" : "RubyGems description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rubygems.platform",
          "in" : "query",
          "description" : "RubyGems platform",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rubygems.summary",
          "in" : "query",
          "description" : "RubyGems summary",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Component tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "yum.architecture",
          "in" : "query",
          "description" : "Yum architecture",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "yum.name",
          "in" : "query",
          "description" : "Yum package name",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Delete Successful"
          },
          "400" : {
            "description" : "Invalid client request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "No components found"
          }
        }
      }
    },
    "/v1/staging/move/{destination}" : {
      "post" : {
        "tags" : [ "Staging" ],
        "summary" : "Move components",
        "description" : "",
        "operationId" : "move",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "destination",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Query by keyword",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repository",
          "in" : "query",
          "description" : "Repository name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "format",
          "in" : "query",
          "description" : "Query by format",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group",
          "in" : "query",
          "description" : "Component group",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Component name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Component version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "prerelease",
          "in" : "query",
          "description" : "Prerelease version flag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "md5",
          "in" : "query",
          "description" : "Specific MD5 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sha1",
          "in" : "query",
          "description" : "Specific SHA-1 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sha256",
          "in" : "query",
          "description" : "Specific SHA-256 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sha512",
          "in" : "query",
          "description" : "Specific SHA-512 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "composer.vendor",
          "in" : "query",
          "description" : "Vendor",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "composer.package",
          "in" : "query",
          "description" : "Package",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "composer.version",
          "in" : "query",
          "description" : "Version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.baseVersion",
          "in" : "query",
          "description" : "Conan base version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.channel",
          "in" : "query",
          "description" : "Conan channel",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.revision",
          "in" : "query",
          "description" : "Conan recipe revision",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.packageId",
          "in" : "query",
          "description" : "Conan package id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.packageRevision",
          "in" : "query",
          "description" : "Conan package revision",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.baseVersion.strict",
          "in" : "query",
          "description" : "Conan base version strict",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.revision.latest",
          "in" : "query",
          "description" : "Return latest revision",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.arch",
          "in" : "query",
          "description" : "Conan arch",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.os",
          "in" : "query",
          "description" : "Conan os",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.compiler",
          "in" : "query",
          "description" : "Conan compiler",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.compiler.version",
          "in" : "query",
          "description" : "Conan compiler version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.compiler.runtime",
          "in" : "query",
          "description" : "Conan compiler runtime",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.imageName",
          "in" : "query",
          "description" : "Docker image name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.imageTag",
          "in" : "query",
          "description" : "Docker image tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.layerId",
          "in" : "query",
          "description" : "Docker layer ID",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.contentDigest",
          "in" : "query",
          "description" : "Docker content digest",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.groupId",
          "in" : "query",
          "description" : "Maven groupId",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.artifactId",
          "in" : "query",
          "description" : "Maven artifactId",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.baseVersion",
          "in" : "query",
          "description" : "Maven base version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.extension",
          "in" : "query",
          "description" : "Maven extension of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.classifier",
          "in" : "query",
          "description" : "Maven classifier of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "gavec",
          "in" : "query",
          "description" : "Group asset version extension classifier",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.scope",
          "in" : "query",
          "description" : "npm scope",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.author",
          "in" : "query",
          "description" : "npm author",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.description",
          "in" : "query",
          "description" : "npm description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.keywords",
          "in" : "query",
          "description" : "npm keywords",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.license",
          "in" : "query",
          "description" : "npm license",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.tagged_is",
          "in" : "query",
          "description" : "npm tagged is",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.tagged_not",
          "in" : "query",
          "description" : "npm tagged not",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.id",
          "in" : "query",
          "description" : "NuGet id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.tags",
          "in" : "query",
          "description" : "NuGet tags",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.title",
          "in" : "query",
          "description" : "NuGet title",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.authors",
          "in" : "query",
          "description" : "NuGet authors",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.description",
          "in" : "query",
          "description" : "NuGet description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.summary",
          "in" : "query",
          "description" : "NuGet summary",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.is_prerelease",
          "in" : "query",
          "description" : "NuGet prerelease",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "p2.pluginName",
          "in" : "query",
          "description" : "p2 plugin name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.classifiers",
          "in" : "query",
          "description" : "PyPI classifiers",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.description",
          "in" : "query",
          "description" : "PyPI description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.keywords",
          "in" : "query",
          "description" : "PyPI keywords",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.summary",
          "in" : "query",
          "description" : "PyPI summary",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rubygems.description",
          "in" : "query",
          "description" : "RubyGems description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rubygems.platform",
          "in" : "query",
          "description" : "RubyGems platform",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rubygems.summary",
          "in" : "query",
          "description" : "RubyGems summary",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Component tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "yum.architecture",
          "in" : "query",
          "description" : "Yum architecture",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "yum.name",
          "in" : "query",
          "description" : "Yum package name",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Move Successful"
          },
          "400" : {
            "description" : "Invalid client request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Authentication required"
          },
          "404" : {
            "description" : "No components found"
          }
        }
      }
    },
    "/v1/tags/{name}" : {
      "get" : {
        "tags" : [ "Tags" ],
        "summary" : "Get a tag",
        "description" : "",
        "operationId" : "get_3",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the tag to retrieve",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TagXO"
            }
          },
          "404" : {
            "description" : "Tag not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Tags" ],
        "summary" : "Update a tags attributes",
        "description" : "",
        "operationId" : "replace",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/BaseTagXO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TagXO"
            }
          },
          "404" : {
            "description" : "Tag not found"
          },
          "400" : {
            "description" : "Bad request. Check tag attributes. The attributes is a JSON document which cannot exceed 20k"
          }
        }
      },
      "delete" : {
        "tags" : [ "Tags" ],
        "summary" : "Delete a tag",
        "description" : "",
        "operationId" : "delete_3",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the tag to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Tag was deleted"
          },
          "404" : {
            "description" : "Tag not found"
          }
        }
      }
    },
    "/v1/tags" : {
      "get" : {
        "tags" : [ "Tags" ],
        "summary" : "List tags",
        "description" : "",
        "operationId" : "getTags",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "continuationToken",
          "in" : "query",
          "description" : "A token returned by a prior request. If present, the next page of results are returned",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PageTagXO"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Tags" ],
        "summary" : "Create a tag",
        "description" : "",
        "operationId" : "create_2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/TagXO"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Tag was added"
          },
          "400" : {
            "description" : "Bad request. Check tag name and attributes. Name can only contain letters, numbers, underscores, hyphens and dots and cannot start with an underscore or dot. The name cannot exceed 256 characters. The attributes is a JSON document which cannot exceed 20k."
          }
        }
      }
    },
    "/v1/tags/associate/{tagName}" : {
      "post" : {
        "tags" : [ "Tags" ],
        "summary" : "Associate components with a tag",
        "description" : "",
        "operationId" : "associate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "tagName",
          "in" : "path",
          "description" : "Tag to associate to the matched components",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "wait",
          "in" : "query",
          "description" : "The query waits until the indexing is complete",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Query by keyword",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repository",
          "in" : "query",
          "description" : "Repository name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "format",
          "in" : "query",
          "description" : "Query by format",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group",
          "in" : "query",
          "description" : "Component group",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Component name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Component version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "prerelease",
          "in" : "query",
          "description" : "Prerelease version flag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "md5",
          "in" : "query",
          "description" : "Specific MD5 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sha1",
          "in" : "query",
          "description" : "Specific SHA-1 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sha256",
          "in" : "query",
          "description" : "Specific SHA-256 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sha512",
          "in" : "query",
          "description" : "Specific SHA-512 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "composer.vendor",
          "in" : "query",
          "description" : "Vendor",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "composer.package",
          "in" : "query",
          "description" : "Package",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "composer.version",
          "in" : "query",
          "description" : "Version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.baseVersion",
          "in" : "query",
          "description" : "Conan base version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.channel",
          "in" : "query",
          "description" : "Conan channel",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.revision",
          "in" : "query",
          "description" : "Conan recipe revision",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.packageId",
          "in" : "query",
          "description" : "Conan package id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.packageRevision",
          "in" : "query",
          "description" : "Conan package revision",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.baseVersion.strict",
          "in" : "query",
          "description" : "Conan base version strict",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.revision.latest",
          "in" : "query",
          "description" : "Return latest revision",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.arch",
          "in" : "query",
          "description" : "Conan arch",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.os",
          "in" : "query",
          "description" : "Conan os",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.compiler",
          "in" : "query",
          "description" : "Conan compiler",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.compiler.version",
          "in" : "query",
          "description" : "Conan compiler version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.compiler.runtime",
          "in" : "query",
          "description" : "Conan compiler runtime",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.imageName",
          "in" : "query",
          "description" : "Docker image name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.imageTag",
          "in" : "query",
          "description" : "Docker image tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.layerId",
          "in" : "query",
          "description" : "Docker layer ID",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.contentDigest",
          "in" : "query",
          "description" : "Docker content digest",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.groupId",
          "in" : "query",
          "description" : "Maven groupId",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.artifactId",
          "in" : "query",
          "description" : "Maven artifactId",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.baseVersion",
          "in" : "query",
          "description" : "Maven base version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.extension",
          "in" : "query",
          "description" : "Maven extension of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.classifier",
          "in" : "query",
          "description" : "Maven classifier of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "gavec",
          "in" : "query",
          "description" : "Group asset version extension classifier",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.scope",
          "in" : "query",
          "description" : "npm scope",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.author",
          "in" : "query",
          "description" : "npm author",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.description",
          "in" : "query",
          "description" : "npm description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.keywords",
          "in" : "query",
          "description" : "npm keywords",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.license",
          "in" : "query",
          "description" : "npm license",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.tagged_is",
          "in" : "query",
          "description" : "npm tagged is",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.tagged_not",
          "in" : "query",
          "description" : "npm tagged not",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.id",
          "in" : "query",
          "description" : "NuGet id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.tags",
          "in" : "query",
          "description" : "NuGet tags",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.title",
          "in" : "query",
          "description" : "NuGet title",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.authors",
          "in" : "query",
          "description" : "NuGet authors",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.description",
          "in" : "query",
          "description" : "NuGet description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.summary",
          "in" : "query",
          "description" : "NuGet summary",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.is_prerelease",
          "in" : "query",
          "description" : "NuGet prerelease",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "p2.pluginName",
          "in" : "query",
          "description" : "p2 plugin name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.classifiers",
          "in" : "query",
          "description" : "PyPI classifiers",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.description",
          "in" : "query",
          "description" : "PyPI description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.keywords",
          "in" : "query",
          "description" : "PyPI keywords",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.summary",
          "in" : "query",
          "description" : "PyPI summary",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rubygems.description",
          "in" : "query",
          "description" : "RubyGems description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rubygems.platform",
          "in" : "query",
          "description" : "RubyGems platform",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rubygems.summary",
          "in" : "query",
          "description" : "RubyGems summary",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Component tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "yum.architecture",
          "in" : "query",
          "description" : "Yum architecture",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "yum.name",
          "in" : "query",
          "description" : "Yum package name",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Associate was successful"
          },
          "404" : {
            "description" : "Tag or components not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Tags" ],
        "summary" : "Disassociate components from a tag",
        "description" : "",
        "operationId" : "disassociate",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "tagName",
          "in" : "path",
          "description" : "Tag to associate to the matched components",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "wait",
          "in" : "query",
          "description" : "The query waits until the indexing is complete",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Query by keyword",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "repository",
          "in" : "query",
          "description" : "Repository name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "format",
          "in" : "query",
          "description" : "Query by format",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "group",
          "in" : "query",
          "description" : "Component group",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Component name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Component version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "prerelease",
          "in" : "query",
          "description" : "Prerelease version flag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "md5",
          "in" : "query",
          "description" : "Specific MD5 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sha1",
          "in" : "query",
          "description" : "Specific SHA-1 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sha256",
          "in" : "query",
          "description" : "Specific SHA-256 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sha512",
          "in" : "query",
          "description" : "Specific SHA-512 hash of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "composer.vendor",
          "in" : "query",
          "description" : "Vendor",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "composer.package",
          "in" : "query",
          "description" : "Package",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "composer.version",
          "in" : "query",
          "description" : "Version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.baseVersion",
          "in" : "query",
          "description" : "Conan base version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.channel",
          "in" : "query",
          "description" : "Conan channel",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.revision",
          "in" : "query",
          "description" : "Conan recipe revision",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.packageId",
          "in" : "query",
          "description" : "Conan package id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.packageRevision",
          "in" : "query",
          "description" : "Conan package revision",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.baseVersion.strict",
          "in" : "query",
          "description" : "Conan base version strict",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.revision.latest",
          "in" : "query",
          "description" : "Return latest revision",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.arch",
          "in" : "query",
          "description" : "Conan arch",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.os",
          "in" : "query",
          "description" : "Conan os",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.compiler",
          "in" : "query",
          "description" : "Conan compiler",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.compiler.version",
          "in" : "query",
          "description" : "Conan compiler version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "conan.settings.compiler.runtime",
          "in" : "query",
          "description" : "Conan compiler runtime",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.imageName",
          "in" : "query",
          "description" : "Docker image name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.imageTag",
          "in" : "query",
          "description" : "Docker image tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.layerId",
          "in" : "query",
          "description" : "Docker layer ID",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "docker.contentDigest",
          "in" : "query",
          "description" : "Docker content digest",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.groupId",
          "in" : "query",
          "description" : "Maven groupId",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.artifactId",
          "in" : "query",
          "description" : "Maven artifactId",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.baseVersion",
          "in" : "query",
          "description" : "Maven base version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.extension",
          "in" : "query",
          "description" : "Maven extension of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "maven.classifier",
          "in" : "query",
          "description" : "Maven classifier of component's asset",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "gavec",
          "in" : "query",
          "description" : "Group asset version extension classifier",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.scope",
          "in" : "query",
          "description" : "npm scope",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.author",
          "in" : "query",
          "description" : "npm author",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.description",
          "in" : "query",
          "description" : "npm description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.keywords",
          "in" : "query",
          "description" : "npm keywords",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.license",
          "in" : "query",
          "description" : "npm license",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.tagged_is",
          "in" : "query",
          "description" : "npm tagged is",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "npm.tagged_not",
          "in" : "query",
          "description" : "npm tagged not",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.id",
          "in" : "query",
          "description" : "NuGet id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.tags",
          "in" : "query",
          "description" : "NuGet tags",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.title",
          "in" : "query",
          "description" : "NuGet title",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.authors",
          "in" : "query",
          "description" : "NuGet authors",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.description",
          "in" : "query",
          "description" : "NuGet description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.summary",
          "in" : "query",
          "description" : "NuGet summary",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nuget.is_prerelease",
          "in" : "query",
          "description" : "NuGet prerelease",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "p2.pluginName",
          "in" : "query",
          "description" : "p2 plugin name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.classifiers",
          "in" : "query",
          "description" : "PyPI classifiers",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.description",
          "in" : "query",
          "description" : "PyPI description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.keywords",
          "in" : "query",
          "description" : "PyPI keywords",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pypi.summary",
          "in" : "query",
          "description" : "PyPI summary",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rubygems.description",
          "in" : "query",
          "description" : "RubyGems description",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rubygems.platform",
          "in" : "query",
          "description" : "RubyGems platform",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "rubygems.summary",
          "in" : "query",
          "description" : "RubyGems summary",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tag",
          "in" : "query",
          "description" : "Component tag",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "yum.architecture",
          "in" : "query",
          "description" : "Yum architecture",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "yum.name",
          "in" : "query",
          "description" : "Yum package name",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Disassociation was successful"
          },
          "404" : {
            "description" : "Tag or components not found"
          }
        }
      }
    },
    "/v1/security/users/{userId}/{realm}/user-token-reset" : {
      "delete" : {
        "tags" : [ "Security management: users" ],
        "summary" : "Reset the user token for the given user.",
        "description" : "Resetting the user token will invalidate the current token and force a new token to be created the next time it is accessed.",
        "operationId" : "reset",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The userId of the user to reset the token for",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "realm",
          "in" : "path",
          "description" : "The realm of the user to reset the token for",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "User token successfully reset"
          },
          "400" : {
            "description" : "User tokens are not enabled"
          },
          "403" : {
            "description" : "Insufficient permissions to reset user token"
          },
          "404" : {
            "description" : "User not found"
          },
          "422" : {
            "description" : "Invalid realm"
          }
        }
      }
    },
    "/v1/security/user-tokens" : {
      "get" : {
        "tags" : [ "Security management: user tokens" ],
        "summary" : "Show if the user token capability is enabled or not",
        "description" : "",
        "operationId" : "serviceStatus",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserTokensApiModel"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Security management: user tokens" ],
        "summary" : "Enable/Disable the user token capability",
        "description" : "",
        "operationId" : "setServiceStatus",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserTokensApiModel"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserTokensApiModel"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Security management: user tokens" ],
        "summary" : "Invalidate all existing user tokens.",
        "description" : "",
        "operationId" : "resetAllUserTokens",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/blobstores/azure/{name}" : {
      "get" : {
        "tags" : [ "Blob store" ],
        "summary" : "Get an Azure blob store configuration by name",
        "description" : "",
        "operationId" : "getBlobStore_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the blob store configuration to fetch",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/AzureBlobStoreApiModel"
            }
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Specified Azure blob store doesn't exist"
          }
        }
      },
      "put" : {
        "tags" : [ "Blob store" ],
        "summary" : "Update an Azure blob store configuration by name",
        "description" : "",
        "operationId" : "updateBlobStore_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AzureBlobStoreApiModel"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the blob store to update",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Azure blob store updated"
          },
          "400" : {
            "description" : "Specified Azure blob store doesn't exist"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/blobstores/azure" : {
      "post" : {
        "tags" : [ "Blob store" ],
        "summary" : "Create an Azure blob store",
        "description" : "",
        "operationId" : "createBlobStore_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AzureBlobStoreApiModel"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Azure blob store created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/azureblobstore/test-connection" : {
      "post" : {
        "tags" : [ "Azure blob store" ],
        "summary" : "Verify connection using supplied Azure Blob Store settings",
        "description" : "",
        "operationId" : "verifyConnection_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AzureConnectionXO"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Azure Blob Store connection was successful"
          },
          "400" : {
            "description" : "Azure Blob Store connection failed"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/malicious-risk/enabledRegistries" : {
      "get" : {
        "tags" : [ "Malicious Risk On Disk" ],
        "summary" : "Get RHC Enabled registries for malicious risk scanning.",
        "description" : "",
        "operationId" : "getEnabledRegistries",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "RHC Enabled registries returned"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/malicious-risk/risk-on-disk" : {
      "get" : {
        "tags" : [ "Malicious Risk On Disk" ],
        "summary" : "Get Malicious Risk On Disk Count",
        "description" : "",
        "operationId" : "getMaliciousRiskOnDiskCount",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Malicious Risk On Disk Count returned"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/capabilities/{capabilityId}" : {
      "put" : {
        "tags" : [ "Capabilities" ],
        "summary" : "Update a capability",
        "description" : "",
        "operationId" : "update_3",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "capabilityId",
          "in" : "path",
          "description" : "capabilityId",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "capability",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CapabilityDTO"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "delete" : {
        "tags" : [ "Capabilities" ],
        "summary" : "Delete a capability",
        "description" : "",
        "operationId" : "delete_4",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "capabilityId",
          "in" : "path",
          "description" : "capabilityId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/v1/capabilities" : {
      "get" : {
        "tags" : [ "Capabilities" ],
        "summary" : "List the active capabilities",
        "description" : "",
        "operationId" : "list",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/CapabilityDTO"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Capabilities" ],
        "summary" : "Create a capability",
        "description" : "",
        "operationId" : "create_3",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CapabilityDTO"
          },
          "x-examples" : {
            "application/json" : "\"type\": \"firewall.audit\", \"notes\": \"Audit firewall capability for maven-central\", \"enabled\": \"true\",\"properties\": {\n        \"repository\": \"maven-central\",\n        \"quarantine\": \"true\"\n}"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CapabilityDTO"
            }
          }
        }
      }
    },
    "/v1/blobstores/google/{name}" : {
      "get" : {
        "tags" : [ "Blob store" ],
        "summary" : "Get the configuration for a Google Cloud blob store",
        "description" : "",
        "operationId" : "getBlobStore_2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "the name of the blob store",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Google Cloud blob store configuration",
            "schema" : {
              "$ref" : "#/definitions/GoogleCloudBlobstoreApiModel"
            }
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Repository not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Blob store" ],
        "summary" : "Update a Google Cloud blob store",
        "description" : "",
        "operationId" : "updateBlobStore_2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "the name of the blobstore",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GoogleCloudBlobstoreApiModel"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Google Cloud blob store updated"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Repository not found"
          }
        }
      }
    },
    "/v1/blobstores/google" : {
      "post" : {
        "tags" : [ "Blob store" ],
        "summary" : "Create a Google Cloud blob store",
        "description" : "",
        "operationId" : "createBlobStore_2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GoogleCloudBlobstoreApiModel"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Google Cloud blob store created"
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/blobstores/google/regions/{projectId}" : {
      "get" : {
        "tags" : [ "Blob store" ],
        "summary" : "Get the project regions by project's id",
        "description" : "",
        "operationId" : "getRegionsByProjectId",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "projectId",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of regions found",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "401" : {
            "description" : "Authentication required"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Project not found"
          }
        }
      }
    },
    "/v1/iq" : {
      "get" : {
        "tags" : [ "Manage Sonatype Repository Firewall configuration" ],
        "summary" : "Get Sonatype Repository Firewall configuration",
        "description" : "",
        "operationId" : "getConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Sonatype Repository Firewall configuration returned"
          }
        }
      },
      "put" : {
        "tags" : [ "Manage Sonatype Repository Firewall configuration" ],
        "summary" : "Update Sonatype Repository Firewall configuration",
        "description" : "",
        "operationId" : "updateConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/IqConnectionXo"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Sonatype Repository Firewall configuration has been updated"
          }
        }
      }
    },
    "/v1/iq/verify-connection" : {
      "post" : {
        "tags" : [ "Manage Sonatype Repository Firewall configuration" ],
        "summary" : "Verify Sonatype Repository Firewall connection",
        "description" : "",
        "operationId" : "verifyConnection_2",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Connection verification complete, check response body for result"
          }
        }
      }
    },
    "/v1/iq/enable" : {
      "post" : {
        "tags" : [ "Manage Sonatype Repository Firewall configuration" ],
        "summary" : "Enable Sonatype Repository Firewall",
        "description" : "",
        "operationId" : "enableIq",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "Sonatype Repository Firewall has been enabled"
          },
          "400" : {
            "description" : "Sonatype Repository Firewall connection not configured"
          }
        }
      }
    },
    "/v1/iq/disable" : {
      "post" : {
        "tags" : [ "Manage Sonatype Repository Firewall configuration" ],
        "summary" : "Disable Sonatype Repository Firewall",
        "description" : "",
        "operationId" : "disableIq",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "Sonatype Repository Firewall has been disabled"
          },
          "400" : {
            "description" : "Sonatype Repository Firewall connection not configured"
          }
        }
      }
    },
    "/v1/monthly-metrics" : {
      "get" : {
        "tags" : [ "Monthly Metrics" ],
        "summary" : "Get the last 12 months of metrics.",
        "description" : "",
        "operationId" : "getLast12MonthsMetrics",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "examples" : {
              "application/json" : [ {
                "requestCount" : 0,
                "componentCount" : 0,
                "metricDate" : "2025-03-01T00:00:00Z",
                "percentageChangeRequest" : "N/A",
                "percentageChangeComponent" : "N/A"
              } ]
            }
          }
        }
      }
    },
    "/v1/http" : {
      "get" : {
        "tags" : [ "Manage Sonatype HTTP System Settings" ],
        "summary" : "Get HTTP system settings",
        "description" : "",
        "operationId" : "getHttpSettings",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful Operation",
            "schema" : {
              "$ref" : "#/definitions/HttpSettingsXo"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Manage Sonatype HTTP System Settings" ],
        "summary" : "Update HTTP system settings",
        "description" : "",
        "operationId" : "updateHttpSettings",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/HttpSettingsXo"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Successful Operation"
          }
        }
      },
      "delete" : {
        "tags" : [ "Manage Sonatype HTTP System Settings" ],
        "summary" : "Reset HTTP System Settings",
        "description" : "",
        "operationId" : "resetHttpSettings",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "Configuration Reset Successful"
          }
        }
      }
    },
    "/v1/security/ssl/truststore" : {
      "get" : {
        "tags" : [ "Security: certificates" ],
        "summary" : "Retrieve a list of certificates added to the trust store.",
        "description" : "",
        "operationId" : "getTrustStoreCertificates",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ApiCertificate"
              }
            }
          },
          "403" : {
            "description" : "Insufficient permissions to list certificates in the trust store."
          }
        }
      },
      "post" : {
        "tags" : [ "Security: certificates" ],
        "summary" : "Add a certificate to the trust store.",
        "description" : "",
        "operationId" : "addCertificate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The certificate to add encoded in PEM format",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The certificate was successfully added.",
            "schema" : {
              "$ref" : "#/definitions/ApiCertificate"
            }
          },
          "409" : {
            "description" : "The certificate already exists in the system."
          },
          "403" : {
            "description" : "Insufficient permissions to add certificate to the trust store."
          }
        }
      }
    },
    "/v1/security/ssl/truststore/{id}" : {
      "delete" : {
        "tags" : [ "Security: certificates" ],
        "summary" : "Remove a certificate in the trust store.",
        "description" : "",
        "operationId" : "removeCertificate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the certificate that should be removed.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "403" : {
            "description" : "Insufficient permissions to remove certificate from the trust store"
          }
        }
      }
    },
    "/v1/security/ssl" : {
      "get" : {
        "tags" : [ "Security: certificates" ],
        "summary" : "Helper method to retrieve certificate details from a remote system.",
        "description" : "",
        "operationId" : "retrieveCertificate",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "host",
          "in" : "query",
          "description" : "The remote system's host name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "port",
          "in" : "query",
          "description" : "The port on the remote system to connect to",
          "required" : false,
          "type" : "integer",
          "default" : 443,
          "format" : "int32"
        }, {
          "name" : "protocolHint",
          "in" : "query",
          "description" : "An optional hint of the protocol to try for the connection",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ApiCertificate"
            }
          },
          "403" : {
            "description" : "Insufficient permissions to retrieve remote certificate."
          },
          "400" : {
            "description" : "A certificate could not be retrieved, see the message for details."
          }
        }
      }
    },
    "/v1/blobstores/group" : {
      "post" : {
        "tags" : [ "Blob store" ],
        "summary" : "Create a group blob store",
        "description" : "",
        "operationId" : "createGroupBlobStore",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GroupBlobStoreApiCreateRequest"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Insufficient permissions"
          }
        }
      }
    },
    "/v1/blobstores/group/{name}" : {
      "get" : {
        "tags" : [ "Blob store" ],
        "summary" : "Get a group blob store configuration by name",
        "description" : "",
        "operationId" : "getGroupBlobStoreConfiguration",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the group blob store",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/GroupBlobStoreApiModel"
            }
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Blob store not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Blob store" ],
        "summary" : "Update a group blob store configuration by name",
        "description" : "",
        "operationId" : "updateGroupBlobStore",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the blob store to update",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/GroupBlobStoreApiUpdateRequest"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Blob store not found"
          }
        }
      }
    },
    "/v1/blobstores/group/convert/{name}/{newNameForOriginal}" : {
      "post" : {
        "tags" : [ "Blob store" ],
        "summary" : "Convert a blob store to a group blob store",
        "description" : "",
        "operationId" : "convertBlobStoreToGroup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the group blob store",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "newNameForOriginal",
          "in" : "path",
          "description" : "A new name to the original blob store",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/GroupBlobStoreApiModel"
            }
          },
          "403" : {
            "description" : "Insufficient permissions"
          },
          "404" : {
            "description" : "Blob store not found"
          }
        }
      }
    },
    "/beta/status/check/{nodeId}" : {
      "get" : {
        "tags" : [ "Status" ],
        "summary" : "Health check endpoint that returns the results of the system status checks of specified Node",
        "description" : "",
        "operationId" : "getNodeSystemStatusChecks",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "nodeId",
          "in" : "path",
          "description" : "Node Id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The system status check results"
          },
          "404" : {
            "description" : "System status information not found"
          }
        }
      }
    },
    "/beta/status/check/cluster" : {
      "get" : {
        "tags" : [ "Status" ],
        "summary" : "Health check endpoint that returns the results of the system status checks",
        "description" : "",
        "operationId" : "getClusterSystemStatusChecks",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/SystemCheckResultsApiDTO"
              }
            }
          },
          "403" : {
            "description" : "Insufficient permissions to retrieve system status checks"
          }
        }
      }
    }
  },
  "definitions" : {
    "AssetXO" : {
      "type" : "object",
      "properties" : {
        "downloadUrl" : {
          "type" : "string"
        },
        "path" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "repository" : {
          "type" : "string"
        },
        "format" : {
          "type" : "string"
        },
        "checksum" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "contentType" : {
          "type" : "string"
        },
        "lastModified" : {
          "type" : "string",
          "format" : "date-time"
        },
        "lastDownloaded" : {
          "type" : "string",
          "format" : "date-time"
        },
        "uploader" : {
          "type" : "string"
        },
        "uploaderIp" : {
          "type" : "string"
        },
        "fileSize" : {
          "type" : "integer",
          "format" : "int64"
        },
        "blobCreated" : {
          "type" : "string",
          "format" : "date-time"
        },
        "blobStoreName" : {
          "type" : "string"
        }
      }
    },
    "Page" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "type" : "object"
          }
        },
        "continuationToken" : {
          "type" : "string"
        }
      }
    },
    "PageAssetXO" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AssetXO"
          }
        },
        "continuationToken" : {
          "type" : "string"
        }
      }
    },
    "ComponentXO" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "repository" : {
          "type" : "string"
        },
        "format" : {
          "type" : "string"
        },
        "group" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        },
        "assets" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AssetXO"
          }
        }
      }
    },
    "PageComponentXO" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ComponentXO"
          }
        },
        "continuationToken" : {
          "type" : "string"
        }
      }
    },
    "ApiPrivilegeRepositoryViewRequest" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the privilege.  This value cannot be changed.",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "description" : {
          "type" : "string"
        },
        "actions" : {
          "type" : "array",
          "description" : "A collection of actions to associate with the privilege, using BREAD syntax (browse,read,edit,add,delete,all) as well as 'run' for script privileges.",
          "items" : {
            "type" : "string",
            "enum" : [ "READ", "BROWSE", "EDIT", "ADD", "DELETE", "RUN", "START", "STOP", "ASSOCIATE", "DISASSOCIATE", "ALL" ]
          }
        },
        "format" : {
          "type" : "string",
          "description" : "The repository format (i.e 'nuget', 'npm') this privilege will grant access to (or * for all)."
        },
        "repository" : {
          "type" : "string",
          "description" : "The name of the repository this privilege will grant access to (or * for all)."
        }
      }
    },
    "ApiPrivilegeRepositoryContentSelectorRequest" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the privilege.  This value cannot be changed.",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "description" : {
          "type" : "string"
        },
        "actions" : {
          "type" : "array",
          "description" : "A collection of actions to associate with the privilege, using BREAD syntax (browse,read,edit,add,delete,all) as well as 'run' for script privileges.",
          "items" : {
            "type" : "string",
            "enum" : [ "READ", "BROWSE", "EDIT", "ADD", "DELETE", "RUN", "START", "STOP", "ASSOCIATE", "DISASSOCIATE", "ALL" ]
          }
        },
        "format" : {
          "type" : "string",
          "description" : "The repository format (i.e 'nuget', 'npm') this privilege will grant access to (or * for all)."
        },
        "repository" : {
          "type" : "string",
          "description" : "The name of the repository this privilege will grant access to (or * for all)."
        },
        "contentSelector" : {
          "type" : "string",
          "description" : "The name of a content selector that will be used to grant access to content via this privilege."
        }
      }
    },
    "ApiPrivilegeRepositoryAdminRequest" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the privilege.  This value cannot be changed.",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "description" : {
          "type" : "string"
        },
        "actions" : {
          "type" : "array",
          "description" : "A collection of actions to associate with the privilege, using BREAD syntax (browse,read,edit,add,delete,all) as well as 'run' for script privileges.",
          "items" : {
            "type" : "string",
            "enum" : [ "READ", "BROWSE", "EDIT", "ADD", "DELETE", "RUN", "START", "STOP", "ASSOCIATE", "DISASSOCIATE", "ALL" ]
          }
        },
        "format" : {
          "type" : "string",
          "description" : "The repository format (i.e 'nuget', 'npm') this privilege will grant access to (or * for all)."
        },
        "repository" : {
          "type" : "string",
          "description" : "The name of the repository this privilege will grant access to (or * for all)."
        }
      }
    },
    "RepositoryXO" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "format" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "RoutingRuleXO" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "description" : {
          "type" : "string",
          "allowEmptyValue" : true
        },
        "mode" : {
          "type" : "string",
          "description" : "Determines what should be done with requests when their path matches any of the matchers",
          "enum" : [ "BLOCK", "ALLOW" ]
        },
        "matchers" : {
          "type" : "array",
          "description" : "Regular expressions used to identify request paths that are allowed or blocked (depending on mode)",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ContentSelectorApiResponse" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The content selector name cannot be changed after creation"
        },
        "type" : {
          "type" : "string",
          "description" : "The type of content selector the backend is using",
          "enum" : [ "csel", "jexl" ]
        },
        "description" : {
          "type" : "string",
          "description" : "A human-readable description"
        },
        "expression" : {
          "type" : "string",
          "example" : "format == \"maven2\" and path =^ \"/org/sonatype/nexus\"",
          "description" : "The expression used to identify content"
        }
      }
    },
    "ContentSelectorApiCreateRequest" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The content selector name cannot be changed after creation",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "description" : {
          "type" : "string",
          "description" : "A human-readable description",
          "allowEmptyValue" : true
        },
        "expression" : {
          "type" : "string",
          "example" : "format == \"maven2\" and path =^ \"/org/sonatype/nexus\"",
          "description" : "The expression used to identify content"
        }
      }
    },
    "ContentSelectorApiUpdateRequest" : {
      "type" : "object",
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "An optional description of this content selector",
          "allowEmptyValue" : true
        },
        "expression" : {
          "type" : "string",
          "example" : "format == \"maven2\" and path =^ \"/org/sonatype/nexus\"",
          "description" : "The expression used to identify content"
        }
      }
    },
    "AbstractApiRepository" : {
      "type" : "object",
      "required" : [ "online" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "format" : {
          "type" : "string",
          "example" : "npm",
          "description" : "Component format held in this repository"
        },
        "type" : {
          "type" : "string",
          "example" : "hosted",
          "description" : "Controls if deployments of and updates to artifacts are allowed",
          "enum" : [ "hosted", "proxy", "group" ]
        },
        "url" : {
          "type" : "string",
          "description" : "URL to the repository"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        }
      }
    },
    "TaskXO" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        },
        "currentState" : {
          "type" : "string"
        },
        "lastRunResult" : {
          "type" : "string"
        },
        "nextRun" : {
          "type" : "string",
          "format" : "date-time"
        },
        "lastRun" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "PageTaskXO" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TaskXO"
          }
        },
        "continuationToken" : {
          "type" : "string"
        }
      }
    },
    "ApiUser" : {
      "type" : "object",
      "required" : [ "status" ],
      "properties" : {
        "userId" : {
          "type" : "string",
          "description" : "The userid which is required for login. This value cannot be changed."
        },
        "firstName" : {
          "type" : "string",
          "description" : "The first name of the user."
        },
        "lastName" : {
          "type" : "string",
          "description" : "The last name of the user."
        },
        "emailAddress" : {
          "type" : "string",
          "description" : "The email address associated with the user."
        },
        "source" : {
          "type" : "string",
          "description" : "The user source which is the origin of this user. This value cannot be changed."
        },
        "status" : {
          "type" : "string",
          "description" : "The user's status, e.g. active or disabled.",
          "enum" : [ "active", "locked", "disabled", "changepassword" ]
        },
        "readOnly" : {
          "type" : "boolean",
          "description" : "Indicates whether the user's properties could be modified by the Nexus Repository Manager. When false only roles are considered during update."
        },
        "roles" : {
          "type" : "array",
          "description" : "The roles which the user has been assigned within Nexus.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "externalRoles" : {
          "type" : "array",
          "description" : "The roles which the user has been assigned in an external source, e.g. LDAP group. These cannot be changed within the Nexus Repository Manager.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ApiPrivilege" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "The type of privilege, each type covers different portions of the system. External values supplied to this will be ignored by the system."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the privilege.  This value cannot be changed.",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "description" : {
          "type" : "string"
        },
        "readOnly" : {
          "type" : "boolean",
          "description" : "Indicates whether the privilege can be changed. External values supplied to this will be ignored by the system."
        }
      }
    },
    "ApiPrivilegeWildcardRequest" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the privilege.  This value cannot be changed.",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "description" : {
          "type" : "string"
        },
        "pattern" : {
          "type" : "string",
          "description" : "A colon separated list of parts that create a permission string."
        }
      }
    },
    "ApiPrivilegeApplicationRequest" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the privilege.  This value cannot be changed.",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "description" : {
          "type" : "string"
        },
        "actions" : {
          "type" : "array",
          "description" : "A collection of actions to associate with the privilege, using BREAD syntax (browse,read,edit,add,delete,all) as well as 'run' for script privileges.",
          "items" : {
            "type" : "string",
            "enum" : [ "READ", "BROWSE", "EDIT", "ADD", "DELETE", "RUN", "START", "STOP", "ASSOCIATE", "DISASSOCIATE", "ALL" ]
          }
        },
        "domain" : {
          "type" : "string",
          "description" : "The domain (i.e. 'blobstores', 'capabilities' or even '*' for all) that this privilege is granting access to.  Note that creating new privileges with a domain is only necessary when using plugins that define their own domain(s)."
        }
      }
    },
    "RoleXORequest" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the role."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the role."
        },
        "description" : {
          "type" : "string",
          "description" : "The description of this role."
        },
        "privileges" : {
          "type" : "array",
          "description" : "The list of privileges assigned to this role.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "roles" : {
          "type" : "array",
          "description" : "The list of roles assigned to this role.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "RoleXOResponse" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the role."
        },
        "source" : {
          "type" : "string",
          "description" : "The user source which is the origin of this role."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the role."
        },
        "description" : {
          "type" : "string",
          "description" : "The description of this role."
        },
        "readOnly" : {
          "type" : "boolean",
          "description" : "Indicates whether the role can be changed. The system will ignore any supplied external values."
        },
        "privileges" : {
          "type" : "array",
          "description" : "The list of privileges assigned to this role.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "roles" : {
          "type" : "array",
          "description" : "The list of roles assigned to this role.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "AptHostedApiRepository" : {
      "type" : "object",
      "required" : [ "apt", "aptSigning", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/HostedStorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "component" : {
          "$ref" : "#/definitions/ComponentAttributes"
        },
        "apt" : {
          "$ref" : "#/definitions/AptHostedRepositoriesAttributes"
        },
        "aptSigning" : {
          "$ref" : "#/definitions/AptSigningRepositoriesAttributes"
        }
      }
    },
    "AptHostedRepositoriesAttributes" : {
      "type" : "object",
      "properties" : {
        "distribution" : {
          "type" : "string",
          "example" : "bionic",
          "description" : "Distribution to fetch"
        }
      }
    },
    "AptSigningRepositoriesAttributes" : {
      "type" : "object",
      "properties" : {
        "keypair" : {
          "type" : "string",
          "description" : "PGP signing key pair (armored private key e.g. gpg --export-secret-key --armor)"
        },
        "passphrase" : {
          "type" : "string",
          "description" : "Passphrase to access PGP signing key"
        }
      }
    },
    "CleanupPolicyAttributes" : {
      "type" : "object",
      "properties" : {
        "policyNames" : {
          "type" : "array",
          "description" : "Components that match any of the applied policies will be deleted",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ComponentAttributes" : {
      "type" : "object",
      "properties" : {
        "proprietaryComponents" : {
          "type" : "boolean",
          "description" : "Components in this repository count as proprietary for namespace conflict attacks (requires Sonatype Nexus Firewall)"
        }
      }
    },
    "HostedStorageAttributes" : {
      "type" : "object",
      "required" : [ "blobStoreName", "strictContentTypeValidation", "writePolicy" ],
      "properties" : {
        "blobStoreName" : {
          "type" : "string",
          "example" : "default",
          "description" : "Blob store used to store repository contents"
        },
        "strictContentTypeValidation" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether to validate uploaded content's MIME type appropriate for the repository format"
        },
        "writePolicy" : {
          "type" : "string",
          "example" : "allow_once",
          "description" : "Controls if deployments of and updates to assets are allowed",
          "enum" : [ "allow", "allow_once", "deny" ]
        }
      }
    },
    "AptHostedRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "apt", "aptSigning", "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/HostedStorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "component" : {
          "$ref" : "#/definitions/ComponentAttributes"
        },
        "apt" : {
          "$ref" : "#/definitions/AptHostedRepositoriesAttributes"
        },
        "aptSigning" : {
          "$ref" : "#/definitions/AptSigningRepositoriesAttributes"
        }
      }
    },
    "AptProxyApiRepository" : {
      "type" : "object",
      "required" : [ "apt", "httpClient", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRuleName" : {
          "type" : "string",
          "description" : "The name of the routing rule assigned to this repository"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        },
        "apt" : {
          "$ref" : "#/definitions/AptProxyRepositoriesAttributes"
        }
      }
    },
    "AptProxyRepositoriesAttributes" : {
      "type" : "object",
      "required" : [ "flat" ],
      "properties" : {
        "distribution" : {
          "type" : "string",
          "example" : "bionic",
          "description" : "Distribution to fetch"
        },
        "flat" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether this repository is flat"
        }
      }
    },
    "HttpClientAttributes" : {
      "type" : "object",
      "required" : [ "autoBlock", "blocked" ],
      "properties" : {
        "blocked" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether to block outbound connections on the repository"
        },
        "autoBlock" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether to auto-block outbound connections if remote peer is detected as unreachable/unresponsive"
        },
        "connection" : {
          "$ref" : "#/definitions/HttpClientConnectionAttributes"
        },
        "authentication" : {
          "$ref" : "#/definitions/HttpClientConnectionAuthenticationAttributes"
        }
      }
    },
    "HttpClientConnectionAttributes" : {
      "type" : "object",
      "properties" : {
        "retries" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 0,
          "description" : "Total retries if the initial connection attempt suffers a timeout",
          "minimum" : 0,
          "maximum" : 10
        },
        "userAgentSuffix" : {
          "type" : "string",
          "description" : "Custom fragment to append to User-Agent header in HTTP requests"
        },
        "timeout" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 60,
          "description" : "Seconds to wait for activity before stopping and retrying the connection",
          "minimum" : 1,
          "maximum" : 3600
        },
        "enableCircularRedirects" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether to enable redirects to the same location (may be required by some servers)"
        },
        "enableCookies" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether to allow cookies to be stored and used"
        },
        "useTrustStore" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Use certificates stored in the Nexus Repository Manager truststore to connect to external systems"
        }
      }
    },
    "HttpClientConnectionAuthenticationAttributes" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "Authentication type",
          "enum" : [ "username", "ntlm", "bearerToken" ]
        },
        "username" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        },
        "ntlmHost" : {
          "type" : "string"
        },
        "ntlmDomain" : {
          "type" : "string"
        },
        "bearerToken" : {
          "type" : "string"
        }
      }
    },
    "NegativeCacheAttributes" : {
      "type" : "object",
      "required" : [ "enabled", "timeToLive" ],
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether to cache responses for content not present in the proxied repository"
        },
        "timeToLive" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1440,
          "description" : "How long to cache the fact that a file was not found in the repository (in minutes)"
        }
      }
    },
    "ProxyAttributes" : {
      "type" : "object",
      "required" : [ "contentMaxAge", "metadataMaxAge" ],
      "properties" : {
        "remoteUrl" : {
          "type" : "string",
          "example" : "https://remote.repository.com",
          "description" : "Location of the remote repository being proxied"
        },
        "contentMaxAge" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1440,
          "description" : "How long to cache artifacts before rechecking the remote repository (in minutes)"
        },
        "metadataMaxAge" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1440,
          "description" : "How long to cache metadata before rechecking the remote repository (in minutes)"
        }
      }
    },
    "ReplicationAttributes" : {
      "type" : "object",
      "required" : [ "preemptivePullEnabled" ],
      "properties" : {
        "preemptivePullEnabled" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether pre-emptive pull is enabled"
        },
        "assetPathRegex" : {
          "type" : "string",
          "description" : "Regular Expression of Asset Paths to pull pre-emptively pull"
        }
      }
    },
    "StorageAttributes" : {
      "type" : "object",
      "required" : [ "blobStoreName", "strictContentTypeValidation" ],
      "properties" : {
        "blobStoreName" : {
          "type" : "string",
          "example" : "default",
          "description" : "Blob store used to store repository contents"
        },
        "strictContentTypeValidation" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether to validate uploaded content's MIME type appropriate for the repository format"
        }
      }
    },
    "AptProxyRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "apt", "httpClient", "name", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRule" : {
          "type" : "string"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        },
        "apt" : {
          "$ref" : "#/definitions/AptProxyRepositoriesAttributes"
        }
      }
    },
    "MavenAttributes" : {
      "type" : "object",
      "properties" : {
        "versionPolicy" : {
          "type" : "string",
          "example" : "MIXED",
          "description" : "What type of artifacts does this repository store?",
          "pattern" : "RELEASE|SNAPSHOT|MIXED",
          "enum" : [ "RELEASE", "SNAPSHOT", "MIXED" ]
        },
        "layoutPolicy" : {
          "type" : "string",
          "example" : "STRICT",
          "description" : "Validate that all paths are maven artifact or metadata paths",
          "pattern" : "STRICT|PERMISSIVE",
          "enum" : [ "STRICT", "PERMISSIVE" ]
        },
        "contentDisposition" : {
          "type" : "string",
          "example" : "ATTACHMENT",
          "description" : "Content Disposition",
          "pattern" : "INLINE|ATTACHMENT",
          "enum" : [ "INLINE", "ATTACHMENT" ]
        }
      }
    },
    "MavenHostedApiRepository" : {
      "type" : "object",
      "required" : [ "maven", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/HostedStorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "component" : {
          "$ref" : "#/definitions/ComponentAttributes"
        },
        "maven" : {
          "$ref" : "#/definitions/MavenAttributes"
        }
      }
    },
    "MavenHostedRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "maven", "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/HostedStorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "component" : {
          "$ref" : "#/definitions/ComponentAttributes"
        },
        "maven" : {
          "$ref" : "#/definitions/MavenAttributes"
        }
      }
    },
    "GroupAttributes" : {
      "type" : "object",
      "properties" : {
        "memberNames" : {
          "type" : "array",
          "description" : "Member repositories' names",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "MavenGroupRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "group", "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "group" : {
          "$ref" : "#/definitions/GroupAttributes"
        }
      }
    },
    "SimpleApiGroupRepository" : {
      "type" : "object",
      "required" : [ "group", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "group" : {
          "$ref" : "#/definitions/GroupAttributes"
        }
      }
    },
    "MavenProxyApiRepository" : {
      "type" : "object",
      "required" : [ "httpClient", "maven", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRuleName" : {
          "type" : "string",
          "description" : "The name of the routing rule assigned to this repository"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        },
        "maven" : {
          "$ref" : "#/definitions/MavenAttributes"
        }
      }
    },
    "HttpClientAttributesWithPreemptiveAuth" : {
      "type" : "object",
      "required" : [ "autoBlock", "blocked" ],
      "properties" : {
        "blocked" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether to block outbound connections on the repository"
        },
        "autoBlock" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether to auto-block outbound connections if remote peer is detected as unreachable/unresponsive"
        },
        "connection" : {
          "$ref" : "#/definitions/HttpClientConnectionAttributes"
        },
        "authentication" : {
          "$ref" : "#/definitions/HttpClientConnectionAuthenticationAttributesWithPreemptive"
        }
      }
    },
    "HttpClientConnectionAuthenticationAttributesWithPreemptive" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "Authentication type",
          "enum" : [ "username", "ntlm", "bearerToken" ]
        },
        "username" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        },
        "ntlmHost" : {
          "type" : "string"
        },
        "ntlmDomain" : {
          "type" : "string"
        },
        "bearerToken" : {
          "type" : "string"
        },
        "preemptive" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether to use pre-emptive authentication. Use with caution. Defaults to false."
        }
      }
    },
    "MavenProxyRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "httpClient", "maven", "name", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributesWithPreemptiveAuth"
        },
        "routingRule" : {
          "type" : "string"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        },
        "maven" : {
          "$ref" : "#/definitions/MavenAttributes"
        }
      }
    },
    "RawAttributes" : {
      "type" : "object",
      "properties" : {
        "contentDisposition" : {
          "type" : "string",
          "example" : "ATTACHMENT",
          "description" : "Content Disposition",
          "enum" : [ "INLINE", "ATTACHMENT" ]
        }
      }
    },
    "RawProxyRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "httpClient", "name", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRule" : {
          "type" : "string"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        },
        "raw" : {
          "$ref" : "#/definitions/RawAttributes"
        }
      }
    },
    "SimpleApiProxyRepository" : {
      "type" : "object",
      "required" : [ "httpClient", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRuleName" : {
          "type" : "string",
          "description" : "The name of the routing rule assigned to this repository"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        }
      }
    },
    "RawHostedRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/HostedStorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "component" : {
          "$ref" : "#/definitions/ComponentAttributes"
        },
        "raw" : {
          "$ref" : "#/definitions/RawAttributes"
        }
      }
    },
    "SimpleApiHostedRepository" : {
      "type" : "object",
      "required" : [ "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/HostedStorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "component" : {
          "$ref" : "#/definitions/ComponentAttributes"
        }
      }
    },
    "RawGroupRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "group", "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "group" : {
          "$ref" : "#/definitions/GroupAttributes"
        },
        "raw" : {
          "$ref" : "#/definitions/RawAttributes"
        }
      }
    },
    "ApiPrivilegeScriptRequest" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the privilege.  This value cannot be changed.",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "description" : {
          "type" : "string"
        },
        "actions" : {
          "type" : "array",
          "description" : "A collection of actions to associate with the privilege, using BREAD syntax (browse,read,edit,add,delete,all) as well as 'run' for script privileges.",
          "items" : {
            "type" : "string",
            "enum" : [ "READ", "BROWSE", "EDIT", "ADD", "DELETE", "RUN", "START", "STOP", "ASSOCIATE", "DISASSOCIATE", "ALL" ]
          }
        },
        "scriptName" : {
          "type" : "string",
          "description" : "The name of a script to give access to."
        }
      }
    },
    "ScriptResultXO" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "result" : {
          "type" : "string"
        }
      }
    },
    "ScriptXO" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "content" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        }
      }
    },
    "ReadLdapServerXo" : {
      "type" : "object",
      "required" : [ "authScheme", "connectionRetryDelaySeconds", "connectionTimeoutSeconds", "groupType", "host", "maxIncidentsCount", "name", "port", "protocol", "searchBase" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "LDAP server name"
        },
        "protocol" : {
          "type" : "string",
          "description" : "LDAP server connection Protocol to use",
          "enum" : [ "ldap", "ldaps" ]
        },
        "useTrustStore" : {
          "type" : "boolean",
          "description" : "Whether to use certificates stored in Nexus Repository Manager's truststore"
        },
        "host" : {
          "type" : "string",
          "description" : "LDAP server connection hostname"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 636,
          "description" : "LDAP server connection port to use"
        },
        "searchBase" : {
          "type" : "string",
          "example" : "dc=example,dc=com",
          "description" : "LDAP location to be added to the connection URL"
        },
        "authScheme" : {
          "type" : "string",
          "description" : "Authentication scheme used for connecting to LDAP server",
          "enum" : [ "NONE", "SIMPLE", "DIGEST_MD5", "CRAM_MD5" ]
        },
        "authRealm" : {
          "type" : "string",
          "example" : "example.com",
          "description" : "The SASL realm to bind to. Required if authScheme is CRAM_MD5 or DIGEST_MD5"
        },
        "authUsername" : {
          "type" : "string",
          "description" : "This must be a fully qualified username if simple authentication is used. Required if authScheme other than none."
        },
        "connectionTimeoutSeconds" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "How long to wait before timeout",
          "minimum" : 1,
          "maximum" : 3600
        },
        "connectionRetryDelaySeconds" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "How long to wait before retrying",
          "minimum" : 0
        },
        "maxIncidentsCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "How many retry attempts",
          "minimum" : 0
        },
        "userBaseDn" : {
          "type" : "string",
          "example" : "ou=people",
          "description" : "The relative DN where user objects are found (e.g. ou=people). This value will have the Search base DN value appended to form the full User search base DN."
        },
        "userSubtree" : {
          "type" : "boolean",
          "description" : "Are users located in structures below the user base DN?"
        },
        "userObjectClass" : {
          "type" : "string",
          "example" : "inetOrgPerson",
          "description" : "LDAP class for user objects"
        },
        "userLdapFilter" : {
          "type" : "string",
          "example" : "(|(mail=*@example.com)(uid=dom*))",
          "description" : "LDAP search filter to limit user search"
        },
        "userIdAttribute" : {
          "type" : "string",
          "example" : "uid",
          "description" : "This is used to find a user given its user ID"
        },
        "userRealNameAttribute" : {
          "type" : "string",
          "example" : "cn",
          "description" : "This is used to find a real name given the user ID"
        },
        "userEmailAddressAttribute" : {
          "type" : "string",
          "example" : "mail",
          "description" : "This is used to find an email address given the user ID"
        },
        "userPasswordAttribute" : {
          "type" : "string",
          "description" : "If this field is blank the user will be authenticated against a bind with the LDAP server"
        },
        "ldapGroupsAsRoles" : {
          "type" : "boolean",
          "description" : "Denotes whether LDAP assigned roles are used as Nexus Repository Manager roles"
        },
        "groupType" : {
          "type" : "string",
          "description" : "Defines a type of groups used: static (a group contains a list of users) or dynamic (a user contains a list of groups). Required if ldapGroupsAsRoles is true.",
          "enum" : [ "static", "dynamic" ]
        },
        "groupBaseDn" : {
          "type" : "string",
          "example" : "ou=Group",
          "description" : "The relative DN where group objects are found (e.g. ou=Group). This value will have the Search base DN value appended to form the full Group search base DN."
        },
        "groupSubtree" : {
          "type" : "boolean",
          "description" : "Are groups located in structures below the group base DN"
        },
        "groupObjectClass" : {
          "type" : "string",
          "example" : "posixGroup",
          "description" : "LDAP class for group objects. Required if groupType is static",
          "minLength" : 0,
          "maxLength" : 0
        },
        "groupIdAttribute" : {
          "type" : "string",
          "example" : "cn",
          "description" : "This field specifies the attribute of the Object class that defines the Group ID. Required if groupType is static",
          "minLength" : 0,
          "maxLength" : 0
        },
        "groupMemberAttribute" : {
          "type" : "string",
          "example" : "memberUid",
          "description" : "LDAP attribute containing the usernames for the group. Required if groupType is static",
          "minLength" : 0,
          "maxLength" : 0
        },
        "groupMemberFormat" : {
          "type" : "string",
          "example" : "uid=${username},ou=people,dc=example,dc=com",
          "description" : "The format of user ID stored in the group member attribute. Required if groupType is static",
          "minLength" : 0,
          "maxLength" : 0
        },
        "userMemberOfAttribute" : {
          "type" : "string",
          "example" : "memberOf",
          "description" : "Set this to the attribute used to store the attribute which holds groups DN in the user object. Required if groupType is dynamic",
          "minLength" : 0,
          "maxLength" : 0
        },
        "id" : {
          "type" : "string",
          "description" : "LDAP server ID"
        },
        "order" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Order number in which the server is being used when looking for a user"
        }
      }
    },
    "CreateLdapServerXo" : {
      "type" : "object",
      "required" : [ "authPassword", "authScheme", "connectionRetryDelaySeconds", "connectionTimeoutSeconds", "groupType", "host", "maxIncidentsCount", "name", "port", "protocol", "searchBase" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "LDAP server name"
        },
        "protocol" : {
          "type" : "string",
          "description" : "LDAP server connection Protocol to use",
          "enum" : [ "ldap", "ldaps" ]
        },
        "useTrustStore" : {
          "type" : "boolean",
          "description" : "Whether to use certificates stored in Nexus Repository Manager's truststore"
        },
        "host" : {
          "type" : "string",
          "description" : "LDAP server connection hostname"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 636,
          "description" : "LDAP server connection port to use"
        },
        "searchBase" : {
          "type" : "string",
          "example" : "dc=example,dc=com",
          "description" : "LDAP location to be added to the connection URL"
        },
        "authScheme" : {
          "type" : "string",
          "description" : "Authentication scheme used for connecting to LDAP server",
          "enum" : [ "NONE", "SIMPLE", "DIGEST_MD5", "CRAM_MD5" ]
        },
        "authRealm" : {
          "type" : "string",
          "example" : "example.com",
          "description" : "The SASL realm to bind to. Required if authScheme is CRAM_MD5 or DIGEST_MD5"
        },
        "authUsername" : {
          "type" : "string",
          "description" : "This must be a fully qualified username if simple authentication is used. Required if authScheme other than none."
        },
        "connectionTimeoutSeconds" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "How long to wait before timeout",
          "minimum" : 1,
          "maximum" : 3600
        },
        "connectionRetryDelaySeconds" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "How long to wait before retrying",
          "minimum" : 0
        },
        "maxIncidentsCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "How many retry attempts",
          "minimum" : 0
        },
        "userBaseDn" : {
          "type" : "string",
          "example" : "ou=people",
          "description" : "The relative DN where user objects are found (e.g. ou=people). This value will have the Search base DN value appended to form the full User search base DN."
        },
        "userSubtree" : {
          "type" : "boolean",
          "description" : "Are users located in structures below the user base DN?"
        },
        "userObjectClass" : {
          "type" : "string",
          "example" : "inetOrgPerson",
          "description" : "LDAP class for user objects"
        },
        "userLdapFilter" : {
          "type" : "string",
          "example" : "(|(mail=*@example.com)(uid=dom*))",
          "description" : "LDAP search filter to limit user search"
        },
        "userIdAttribute" : {
          "type" : "string",
          "example" : "uid",
          "description" : "This is used to find a user given its user ID"
        },
        "userRealNameAttribute" : {
          "type" : "string",
          "example" : "cn",
          "description" : "This is used to find a real name given the user ID"
        },
        "userEmailAddressAttribute" : {
          "type" : "string",
          "example" : "mail",
          "description" : "This is used to find an email address given the user ID"
        },
        "userPasswordAttribute" : {
          "type" : "string",
          "description" : "If this field is blank the user will be authenticated against a bind with the LDAP server"
        },
        "ldapGroupsAsRoles" : {
          "type" : "boolean",
          "description" : "Denotes whether LDAP assigned roles are used as Nexus Repository Manager roles"
        },
        "groupType" : {
          "type" : "string",
          "description" : "Defines a type of groups used: static (a group contains a list of users) or dynamic (a user contains a list of groups). Required if ldapGroupsAsRoles is true.",
          "enum" : [ "static", "dynamic" ]
        },
        "groupBaseDn" : {
          "type" : "string",
          "example" : "ou=Group",
          "description" : "The relative DN where group objects are found (e.g. ou=Group). This value will have the Search base DN value appended to form the full Group search base DN."
        },
        "groupSubtree" : {
          "type" : "boolean",
          "description" : "Are groups located in structures below the group base DN"
        },
        "groupObjectClass" : {
          "type" : "string",
          "example" : "posixGroup",
          "description" : "LDAP class for group objects. Required if groupType is static",
          "minLength" : 0,
          "maxLength" : 0
        },
        "groupIdAttribute" : {
          "type" : "string",
          "example" : "cn",
          "description" : "This field specifies the attribute of the Object class that defines the Group ID. Required if groupType is static",
          "minLength" : 0,
          "maxLength" : 0
        },
        "groupMemberAttribute" : {
          "type" : "string",
          "example" : "memberUid",
          "description" : "LDAP attribute containing the usernames for the group. Required if groupType is static",
          "minLength" : 0,
          "maxLength" : 0
        },
        "groupMemberFormat" : {
          "type" : "string",
          "example" : "uid=${username},ou=people,dc=example,dc=com",
          "description" : "The format of user ID stored in the group member attribute. Required if groupType is static",
          "minLength" : 0,
          "maxLength" : 0
        },
        "userMemberOfAttribute" : {
          "type" : "string",
          "example" : "memberOf",
          "description" : "Set this to the attribute used to store the attribute which holds groups DN in the user object. Required if groupType is dynamic",
          "minLength" : 0,
          "maxLength" : 0
        },
        "authPassword" : {
          "type" : "string",
          "description" : "The password to bind with. Required if authScheme other than none."
        }
      }
    },
    "UpdateLdapServerXo" : {
      "type" : "object",
      "required" : [ "authPassword", "authScheme", "connectionRetryDelaySeconds", "connectionTimeoutSeconds", "groupType", "host", "maxIncidentsCount", "name", "port", "protocol", "searchBase" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "LDAP server name"
        },
        "protocol" : {
          "type" : "string",
          "description" : "LDAP server connection Protocol to use",
          "enum" : [ "ldap", "ldaps" ]
        },
        "useTrustStore" : {
          "type" : "boolean",
          "description" : "Whether to use certificates stored in Nexus Repository Manager's truststore"
        },
        "host" : {
          "type" : "string",
          "description" : "LDAP server connection hostname"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 636,
          "description" : "LDAP server connection port to use"
        },
        "searchBase" : {
          "type" : "string",
          "example" : "dc=example,dc=com",
          "description" : "LDAP location to be added to the connection URL"
        },
        "authScheme" : {
          "type" : "string",
          "description" : "Authentication scheme used for connecting to LDAP server",
          "enum" : [ "NONE", "SIMPLE", "DIGEST_MD5", "CRAM_MD5" ]
        },
        "authRealm" : {
          "type" : "string",
          "example" : "example.com",
          "description" : "The SASL realm to bind to. Required if authScheme is CRAM_MD5 or DIGEST_MD5"
        },
        "authUsername" : {
          "type" : "string",
          "description" : "This must be a fully qualified username if simple authentication is used. Required if authScheme other than none."
        },
        "connectionTimeoutSeconds" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 1,
          "description" : "How long to wait before timeout",
          "minimum" : 1,
          "maximum" : 3600
        },
        "connectionRetryDelaySeconds" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "How long to wait before retrying",
          "minimum" : 0
        },
        "maxIncidentsCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "How many retry attempts",
          "minimum" : 0
        },
        "userBaseDn" : {
          "type" : "string",
          "example" : "ou=people",
          "description" : "The relative DN where user objects are found (e.g. ou=people). This value will have the Search base DN value appended to form the full User search base DN."
        },
        "userSubtree" : {
          "type" : "boolean",
          "description" : "Are users located in structures below the user base DN?"
        },
        "userObjectClass" : {
          "type" : "string",
          "example" : "inetOrgPerson",
          "description" : "LDAP class for user objects"
        },
        "userLdapFilter" : {
          "type" : "string",
          "example" : "(|(mail=*@example.com)(uid=dom*))",
          "description" : "LDAP search filter to limit user search"
        },
        "userIdAttribute" : {
          "type" : "string",
          "example" : "uid",
          "description" : "This is used to find a user given its user ID"
        },
        "userRealNameAttribute" : {
          "type" : "string",
          "example" : "cn",
          "description" : "This is used to find a real name given the user ID"
        },
        "userEmailAddressAttribute" : {
          "type" : "string",
          "example" : "mail",
          "description" : "This is used to find an email address given the user ID"
        },
        "userPasswordAttribute" : {
          "type" : "string",
          "description" : "If this field is blank the user will be authenticated against a bind with the LDAP server"
        },
        "ldapGroupsAsRoles" : {
          "type" : "boolean",
          "description" : "Denotes whether LDAP assigned roles are used as Nexus Repository Manager roles"
        },
        "groupType" : {
          "type" : "string",
          "description" : "Defines a type of groups used: static (a group contains a list of users) or dynamic (a user contains a list of groups). Required if ldapGroupsAsRoles is true.",
          "enum" : [ "static", "dynamic" ]
        },
        "groupBaseDn" : {
          "type" : "string",
          "example" : "ou=Group",
          "description" : "The relative DN where group objects are found (e.g. ou=Group). This value will have the Search base DN value appended to form the full Group search base DN."
        },
        "groupSubtree" : {
          "type" : "boolean",
          "description" : "Are groups located in structures below the group base DN"
        },
        "groupObjectClass" : {
          "type" : "string",
          "example" : "posixGroup",
          "description" : "LDAP class for group objects. Required if groupType is static",
          "minLength" : 0,
          "maxLength" : 0
        },
        "groupIdAttribute" : {
          "type" : "string",
          "example" : "cn",
          "description" : "This field specifies the attribute of the Object class that defines the Group ID. Required if groupType is static",
          "minLength" : 0,
          "maxLength" : 0
        },
        "groupMemberAttribute" : {
          "type" : "string",
          "example" : "memberUid",
          "description" : "LDAP attribute containing the usernames for the group. Required if groupType is static",
          "minLength" : 0,
          "maxLength" : 0
        },
        "groupMemberFormat" : {
          "type" : "string",
          "example" : "uid=${username},ou=people,dc=example,dc=com",
          "description" : "The format of user ID stored in the group member attribute. Required if groupType is static",
          "minLength" : 0,
          "maxLength" : 0
        },
        "userMemberOfAttribute" : {
          "type" : "string",
          "example" : "memberOf",
          "description" : "Set this to the attribute used to store the attribute which holds groups DN in the user object. Required if groupType is dynamic",
          "minLength" : 0,
          "maxLength" : 0
        },
        "authPassword" : {
          "type" : "string",
          "description" : "The password to bind with. Required if authScheme other than none."
        },
        "id" : {
          "type" : "string",
          "description" : "LDAP server ID"
        }
      }
    },
    "DockerAttributes" : {
      "type" : "object",
      "required" : [ "forceBasicAuth", "v1Enabled" ],
      "properties" : {
        "v1Enabled" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Whether to allow clients to use the V1 API to interact with this repository"
        },
        "forceBasicAuth" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether to force authentication (Docker Bearer Token Realm required if false)"
        },
        "httpPort" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 8082,
          "description" : "Create an HTTP connector at specified port"
        },
        "httpsPort" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 8083,
          "description" : "Create an HTTPS connector at specified port"
        },
        "subdomain" : {
          "type" : "string",
          "example" : "docker-a",
          "description" : "Allows to use subdomain"
        },
        "pathEnabled" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Allows to use repository name in Docker image paths"
        }
      }
    },
    "DockerGroupApiRepository" : {
      "type" : "object",
      "required" : [ "docker", "group", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "group" : {
          "$ref" : "#/definitions/GroupDeployAttributes"
        },
        "docker" : {
          "$ref" : "#/definitions/DockerAttributes"
        }
      }
    },
    "GroupDeployAttributes" : {
      "type" : "object",
      "properties" : {
        "memberNames" : {
          "type" : "array",
          "description" : "Member repositories' names",
          "items" : {
            "type" : "string"
          }
        },
        "writableMember" : {
          "type" : "string",
          "description" : "Pro-only: This field is for the Group Deployment feature available in NXRM Pro."
        }
      }
    },
    "DockerGroupRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "docker", "group", "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "group" : {
          "$ref" : "#/definitions/GroupDeployAttributes"
        },
        "docker" : {
          "$ref" : "#/definitions/DockerAttributes"
        }
      }
    },
    "DockerProxyApiRepository" : {
      "type" : "object",
      "required" : [ "docker", "dockerProxy", "httpClient", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRuleName" : {
          "type" : "string",
          "description" : "The name of the routing rule assigned to this repository"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        },
        "docker" : {
          "$ref" : "#/definitions/DockerAttributes"
        },
        "dockerProxy" : {
          "$ref" : "#/definitions/DockerProxyAttributes"
        }
      }
    },
    "DockerProxyAttributes" : {
      "type" : "object",
      "properties" : {
        "indexType" : {
          "type" : "string",
          "example" : "HUB",
          "description" : "Type of Docker Index",
          "enum" : [ "HUB", "REGISTRY", "CUSTOM" ]
        },
        "indexUrl" : {
          "type" : "string",
          "description" : "Url of Docker Index to use"
        },
        "cacheForeignLayers" : {
          "type" : "boolean",
          "description" : "Allow Nexus Repository Manager to download and cache foreign layers"
        },
        "foreignLayerUrlWhitelist" : {
          "type" : "array",
          "description" : "Regular expressions used to identify URLs that are allowed for foreign layer requests",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "DockerProxyRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "docker", "dockerProxy", "httpClient", "name", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRule" : {
          "type" : "string"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        },
        "docker" : {
          "$ref" : "#/definitions/DockerAttributes"
        },
        "dockerProxy" : {
          "$ref" : "#/definitions/DockerProxyAttributes"
        }
      }
    },
    "DockerHostedApiRepository" : {
      "type" : "object",
      "required" : [ "docker", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/HostedStorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "component" : {
          "$ref" : "#/definitions/ComponentAttributes"
        },
        "docker" : {
          "$ref" : "#/definitions/DockerAttributes"
        }
      }
    },
    "DockerHostedRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "docker", "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/DockerHostedStorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "component" : {
          "$ref" : "#/definitions/ComponentAttributes"
        },
        "docker" : {
          "$ref" : "#/definitions/DockerAttributes"
        }
      }
    },
    "DockerHostedStorageAttributes" : {
      "type" : "object",
      "required" : [ "blobStoreName", "strictContentTypeValidation", "writePolicy" ],
      "properties" : {
        "blobStoreName" : {
          "type" : "string",
          "example" : "default",
          "description" : "Blob store used to store repository contents"
        },
        "strictContentTypeValidation" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether to validate uploaded content's MIME type appropriate for the repository format"
        },
        "writePolicy" : {
          "type" : "string",
          "example" : "allow_once",
          "description" : "Controls if deployments of and updates to assets are allowed",
          "enum" : [ "allow", "allow_once", "deny" ]
        },
        "latestPolicy" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether to allow redeploying the 'latest' tag but defer to the Deployment Policy for all other tags"
        }
      }
    },
    "GitLfsHostedRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/HostedStorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "component" : {
          "$ref" : "#/definitions/ComponentAttributes"
        }
      }
    },
    "RubyGemsProxyRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "httpClient", "name", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRule" : {
          "type" : "string"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        }
      }
    },
    "RubyGemsGroupRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "group", "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "group" : {
          "$ref" : "#/definitions/GroupAttributes"
        }
      }
    },
    "RubyGemsHostedRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/HostedStorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "component" : {
          "$ref" : "#/definitions/ComponentAttributes"
        }
      }
    },
    "YumProxyRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "httpClient", "name", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRule" : {
          "type" : "string"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        },
        "yumSigning" : {
          "$ref" : "#/definitions/YumSigningRepositoriesAttributes"
        }
      }
    },
    "YumSigningRepositoriesAttributes" : {
      "type" : "object",
      "properties" : {
        "keypair" : {
          "type" : "string",
          "description" : "PGP signing key pair (armored private key e.g. gpg --export-secret-key --armor)"
        },
        "passphrase" : {
          "type" : "string",
          "description" : "Passphrase to access PGP signing key"
        }
      }
    },
    "YumGroupRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "group", "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "group" : {
          "$ref" : "#/definitions/GroupAttributes"
        },
        "yumSigning" : {
          "$ref" : "#/definitions/YumSigningRepositoriesAttributes"
        }
      }
    },
    "YumAttributes" : {
      "type" : "object",
      "required" : [ "repodataDepth" ],
      "properties" : {
        "repodataDepth" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 5,
          "description" : "Specifies the repository depth where repodata folder(s) are created",
          "minimum" : 0,
          "maximum" : 5
        },
        "deployPolicy" : {
          "type" : "string",
          "example" : "STRICT",
          "description" : "Validate that all paths are RPMs or yum metadata",
          "enum" : [ "PERMISSIVE", "STRICT" ]
        }
      }
    },
    "YumHostedApiRepository" : {
      "type" : "object",
      "required" : [ "online", "storage", "yum" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/HostedStorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "component" : {
          "$ref" : "#/definitions/ComponentAttributes"
        },
        "yum" : {
          "$ref" : "#/definitions/YumAttributes"
        }
      }
    },
    "YumHostedRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "name", "online", "storage", "yum" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/HostedStorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "component" : {
          "$ref" : "#/definitions/ComponentAttributes"
        },
        "yum" : {
          "$ref" : "#/definitions/YumAttributes"
        }
      }
    },
    "NodeInformation" : {
      "type" : "object",
      "properties" : {
        "nodeId" : {
          "type" : "string"
        }
      }
    },
    "UploadDefinitionXO" : {
      "type" : "object",
      "properties" : {
        "format" : {
          "type" : "string"
        },
        "multipleUpload" : {
          "type" : "boolean"
        },
        "componentFields" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UploadFieldDefinitionXO"
          }
        },
        "assetFields" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UploadFieldDefinitionXO"
          }
        }
      }
    },
    "UploadFieldDefinitionXO" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "optional" : {
          "type" : "boolean"
        },
        "group" : {
          "type" : "string"
        }
      }
    },
    "ApiKeysReEncryptionRequestApiXO" : {
      "type" : "object",
      "properties" : {
        "algorithmForDecryption" : {
          "type" : "string",
          "description" : "Optional - The algorithm to be used to decrypt the principals"
        },
        "notifyEmail" : {
          "type" : "string",
          "description" : "Optional - Email to notify when task finishes"
        }
      }
    },
    "EulaStatus" : {
      "type" : "object",
      "properties" : {
        "accepted" : {
          "type" : "boolean"
        },
        "disclaimer" : {
          "type" : "string"
        }
      }
    },
    "AnonymousAccessSettingsXO" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "description" : "Whether or not Anonymous Access is enabled"
        },
        "userId" : {
          "type" : "string",
          "description" : "The username of the anonymous account"
        },
        "realmName" : {
          "type" : "string",
          "description" : "The name of the authentication realm for the anonymous account"
        }
      }
    },
    "ApiUserSource" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "ReEncryptionRequestApiXO" : {
      "type" : "object",
      "properties" : {
        "secretKeyId" : {
          "type" : "string",
          "description" : "Key identifier that will be used to re-encrypt secrets"
        },
        "notifyEmail" : {
          "type" : "string",
          "description" : "Optional - Email to notify when task finishes"
        }
      }
    },
    "RealmApiXO" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "SupportZipGeneratorRequest" : {
      "type" : "object",
      "properties" : {
        "systemInformation" : {
          "type" : "boolean"
        },
        "threadDump" : {
          "type" : "boolean"
        },
        "metrics" : {
          "type" : "boolean"
        },
        "configuration" : {
          "type" : "boolean"
        },
        "security" : {
          "type" : "boolean"
        },
        "log" : {
          "type" : "boolean"
        },
        "taskLog" : {
          "type" : "boolean"
        },
        "auditLog" : {
          "type" : "boolean"
        },
        "jmx" : {
          "type" : "boolean"
        },
        "replication" : {
          "type" : "boolean"
        },
        "limitFileSizes" : {
          "type" : "boolean"
        },
        "limitZipSize" : {
          "type" : "boolean"
        },
        "archivedLog" : {
          "type" : "integer",
          "format" : "int32"
        },
        "hostname" : {
          "type" : "string"
        }
      }
    },
    "SupportZipXO" : {
      "type" : "object",
      "properties" : {
        "file" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "size" : {
          "type" : "integer",
          "format" : "int64"
        },
        "truncated" : {
          "type" : "boolean"
        }
      }
    },
    "BlobStoreApiSoftQuota" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "The type to use such as spaceRemainingQuota, or spaceUsedQuota",
          "enum" : [ "spaceRemainingQuota", "spaceUsedQuota" ]
        },
        "limit" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The limit in MB.",
          "minimum" : 0
        }
      }
    },
    "GenericBlobStoreApiResponse" : {
      "type" : "object",
      "properties" : {
        "softQuota" : {
          "description" : "Settings to control the soft quota",
          "$ref" : "#/definitions/BlobStoreApiSoftQuota"
        },
        "name" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "unavailable" : {
          "type" : "boolean"
        },
        "blobCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "totalSizeInBytes" : {
          "type" : "integer",
          "format" : "int64"
        },
        "availableSpaceInBytes" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "BlobStoreQuotaResultXO" : {
      "type" : "object",
      "properties" : {
        "isViolation" : {
          "type" : "boolean"
        },
        "message" : {
          "type" : "string"
        },
        "blobStoreName" : {
          "type" : "string"
        }
      }
    },
    "FileBlobStoreApiCreateRequest" : {
      "type" : "object",
      "properties" : {
        "softQuota" : {
          "description" : "Settings to control the soft quota",
          "$ref" : "#/definitions/BlobStoreApiSoftQuota"
        },
        "path" : {
          "type" : "string",
          "description" : "An absolute path or a path relative to <data-directory>/blobs"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "FileBlobStoreApiModel" : {
      "type" : "object",
      "properties" : {
        "softQuota" : {
          "description" : "Settings to control the soft quota",
          "$ref" : "#/definitions/BlobStoreApiSoftQuota"
        },
        "path" : {
          "type" : "string",
          "description" : "An absolute path or a path relative to <data-directory>/blobs"
        }
      }
    },
    "FileBlobStoreApiUpdateRequest" : {
      "type" : "object",
      "properties" : {
        "softQuota" : {
          "description" : "Settings to control the soft quota",
          "$ref" : "#/definitions/BlobStoreApiSoftQuota"
        },
        "path" : {
          "type" : "string",
          "description" : "An absolute path or a path relative to <data-directory>/blobs"
        }
      }
    },
    "S3BlobStoreApiAdvancedBucketConnection" : {
      "type" : "object",
      "properties" : {
        "endpoint" : {
          "type" : "string",
          "description" : "A custom endpoint URL for third party object stores using the S3 API."
        },
        "signerType" : {
          "type" : "string",
          "description" : "An API signature version which may be required for third party object stores using the S3 API."
        },
        "forcePathStyle" : {
          "type" : "boolean",
          "description" : "Setting this flag will result in path-style access being used for all requests."
        },
        "maxConnectionPoolSize" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Setting this value will override the default connection pool size of Nexus of the s3 client for this blobstore."
        }
      }
    },
    "S3BlobStoreApiBucket" : {
      "type" : "object",
      "required" : [ "name", "region" ],
      "properties" : {
        "region" : {
          "type" : "string",
          "example" : "DEFAULT",
          "description" : "The AWS region to create a new S3 bucket in or an existing S3 bucket's region"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the S3 bucket"
        },
        "prefix" : {
          "type" : "string",
          "description" : "The S3 blob store (i.e S3 object) key prefix"
        }
      }
    },
    "S3BlobStoreApiBucketConfiguration" : {
      "type" : "object",
      "required" : [ "bucket" ],
      "properties" : {
        "bucket" : {
          "description" : "Details of the S3 bucket such as name and region",
          "readOnly" : true,
          "$ref" : "#/definitions/S3BlobStoreApiBucket"
        },
        "encryption" : {
          "description" : "The type of encryption to use if any",
          "readOnly" : true,
          "$ref" : "#/definitions/S3BlobStoreApiEncryption"
        },
        "failoverBuckets" : {
          "type" : "array",
          "description" : "A list of secondary buckets which have bidirectional replication enabled and should be used when Nexus is running in the region",
          "items" : {
            "$ref" : "#/definitions/S3BlobStoreApiFailoverBucket"
          }
        },
        "activeRegion" : {
          "type" : "string",
          "description" : "The active region based on bucket configuration, failover buckets, and EC2 region Nexus is running.",
          "readOnly" : true
        },
        "preSignedUrlEnabled" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether pre assigned URL is enabled or not."
        },
        "bucketSecurity" : {
          "description" : "Security details for granting access the S3 API",
          "$ref" : "#/definitions/S3BlobStoreApiBucketSecurity"
        },
        "advancedBucketConnection" : {
          "description" : "A custom endpoint URL, signer type and whether path style access is enabled",
          "$ref" : "#/definitions/S3BlobStoreApiAdvancedBucketConnection"
        }
      }
    },
    "S3BlobStoreApiBucketSecurity" : {
      "type" : "object",
      "properties" : {
        "accessKeyId" : {
          "type" : "string",
          "description" : "An IAM access key ID for granting access to the S3 bucket"
        },
        "secretAccessKey" : {
          "type" : "string",
          "description" : "The secret access key associated with the specified IAM access key ID"
        },
        "role" : {
          "type" : "string",
          "description" : "An IAM role to assume in order to access the S3 bucket"
        },
        "sessionToken" : {
          "type" : "string",
          "description" : "An AWS STS session token associated with temporary security credentials which grant access to the S3 bucket"
        }
      }
    },
    "S3BlobStoreApiEncryption" : {
      "type" : "object",
      "properties" : {
        "encryptionType" : {
          "type" : "string",
          "description" : "The type of S3 server side encryption to use.",
          "enum" : [ "s3ManagedEncryption", "kmsManagedEncryption" ]
        },
        "encryptionKey" : {
          "type" : "string",
          "description" : "The encryption key."
        }
      }
    },
    "S3BlobStoreApiFailoverBucket" : {
      "type" : "object",
      "required" : [ "bucketName", "region" ],
      "properties" : {
        "region" : {
          "type" : "string",
          "description" : "The region containing the bucket",
          "readOnly" : true
        },
        "bucketName" : {
          "type" : "string",
          "description" : "The name of the bucket in the region",
          "readOnly" : true
        }
      }
    },
    "S3BlobStoreApiModel" : {
      "type" : "object",
      "required" : [ "bucketConfiguration", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "s3",
          "description" : "The name of the S3 blob store."
        },
        "softQuota" : {
          "description" : "Settings to control the soft quota.",
          "$ref" : "#/definitions/BlobStoreApiSoftQuota"
        },
        "bucketConfiguration" : {
          "description" : "The S3 specific configuration details for the S3 object that'll contain the blob store.",
          "$ref" : "#/definitions/S3BlobStoreApiBucketConfiguration"
        },
        "type" : {
          "type" : "string",
          "example" : "S3",
          "description" : "The blob store type.",
          "readOnly" : true
        }
      }
    },
    "ApiCreateUser" : {
      "type" : "object",
      "required" : [ "status" ],
      "properties" : {
        "userId" : {
          "type" : "string",
          "description" : "The userid which is required for login. This value cannot be changed."
        },
        "firstName" : {
          "type" : "string",
          "description" : "The first name of the user."
        },
        "lastName" : {
          "type" : "string",
          "description" : "The last name of the user."
        },
        "emailAddress" : {
          "type" : "string",
          "description" : "The email address associated with the user."
        },
        "password" : {
          "type" : "string",
          "description" : "The password for the new user."
        },
        "status" : {
          "type" : "string",
          "description" : "The user's status, e.g. active or disabled.",
          "enum" : [ "active", "locked", "disabled", "changepassword" ]
        },
        "roles" : {
          "type" : "array",
          "description" : "The roles which the user has been assigned within Nexus.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ApiEmailConfiguration" : {
      "type" : "object",
      "required" : [ "port" ],
      "properties" : {
        "enabled" : {
          "type" : "boolean"
        },
        "host" : {
          "type" : "string"
        },
        "port" : {
          "type" : "integer",
          "format" : "int32"
        },
        "username" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        },
        "fromAddress" : {
          "type" : "string",
          "example" : "nexus@example.org"
        },
        "subjectPrefix" : {
          "type" : "string",
          "description" : "A prefix to add to all email subjects to aid in identifying automated emails"
        },
        "startTlsEnabled" : {
          "type" : "boolean",
          "description" : "Enable STARTTLS Support for Insecure Connections"
        },
        "startTlsRequired" : {
          "type" : "boolean",
          "description" : "Require STARTTLS Support"
        },
        "sslOnConnectEnabled" : {
          "type" : "boolean",
          "description" : "Enable SSL/TLS Encryption upon Connection"
        },
        "sslServerIdentityCheckEnabled" : {
          "type" : "boolean",
          "description" : "Verify the server certificate when using TLS or SSL"
        },
        "nexusTrustStoreEnabled" : {
          "type" : "boolean",
          "description" : "Use the Nexus Repository Manager's certificate truststore"
        }
      }
    },
    "ApiEmailValidation" : {
      "type" : "object",
      "properties" : {
        "success" : {
          "type" : "boolean"
        },
        "reason" : {
          "type" : "string"
        }
      }
    },
    "ReadOnlyState" : {
      "type" : "object",
      "properties" : {
        "summaryReason" : {
          "type" : "string"
        },
        "systemInitiated" : {
          "type" : "boolean"
        },
        "frozen" : {
          "type" : "boolean"
        }
      }
    },
    "Result" : {
      "type" : "object",
      "properties" : {
        "healthy" : {
          "type" : "boolean"
        },
        "message" : {
          "type" : "string"
        },
        "error" : {
          "$ref" : "#/definitions/Throwable"
        },
        "details" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "time" : {
          "type" : "integer",
          "format" : "int64"
        },
        "duration" : {
          "type" : "integer",
          "format" : "int64"
        },
        "timestamp" : {
          "type" : "string"
        }
      }
    },
    "StackTraceElement" : {
      "type" : "object",
      "properties" : {
        "classLoaderName" : {
          "type" : "string"
        },
        "moduleName" : {
          "type" : "string"
        },
        "moduleVersion" : {
          "type" : "string"
        },
        "methodName" : {
          "type" : "string"
        },
        "fileName" : {
          "type" : "string"
        },
        "lineNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "nativeMethod" : {
          "type" : "boolean"
        },
        "className" : {
          "type" : "string"
        }
      }
    },
    "Throwable" : {
      "type" : "object",
      "properties" : {
        "cause" : {
          "$ref" : "#/definitions/Throwable"
        },
        "stackTrace" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/StackTraceElement"
          }
        },
        "message" : {
          "type" : "string"
        },
        "suppressed" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Throwable"
          }
        },
        "localizedMessage" : {
          "type" : "string"
        }
      }
    },
    "FrequencyXO" : {
      "type" : "object",
      "required" : [ "schedule" ],
      "properties" : {
        "schedule" : {
          "type" : "string",
          "description" : "Type of schedule (\"manual\", \"once\", \"hourly\", \"daily\", \"weekly\", \"monthly\", \"cron\")"
        },
        "startDate" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Start date of the task represented in unix timestamp. Does not apply for \"manual\" schedule."
        },
        "timeZoneOffset" : {
          "type" : "string",
          "example" : "-05:00",
          "description" : "The offset time zone of the client. Example: "
        },
        "recurringDays" : {
          "type" : "array",
          "description" : "Array with the number of the days the task must run. For \"weekly\" schedule allowed values, 1 to 7. For \"monthly\" schedule allowed values, 1 to 31.",
          "items" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "cronExpression" : {
          "type" : "string",
          "example" : "0 1 2 * * ?",
          "description" : "Cron expression for the task. Only applies for for \"cron\" schedule."
        }
      }
    },
    "TaskTemplateXO" : {
      "type" : "object",
      "required" : [ "enabled", "frequency", "name", "notificationCondition", "type" ],
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "The type of task to be created."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the task template."
        },
        "enabled" : {
          "type" : "boolean",
          "description" : "Indicates if the task would be enabled."
        },
        "alertEmail" : {
          "type" : "string",
          "description" : "e-mail for task notifications."
        },
        "notificationCondition" : {
          "type" : "string",
          "description" : "Condition required to notify a task execution.",
          "enum" : [ "FAILURE", "SUCCESS_FAILURE" ]
        },
        "frequency" : {
          "description" : "Frequency of execution of the task.",
          "$ref" : "#/definitions/FrequencyXO"
        },
        "properties" : {
          "type" : "object",
          "description" : "Additional properties for the task",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "IqAuditXo" : {
      "type" : "object",
      "required" : [ "enabledQuarantine", "repositoryName" ],
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "description" : "is audit enabled"
        },
        "repositoryName" : {
          "type" : "string",
          "description" : "repository name"
        },
        "enabledQuarantine" : {
          "type" : "boolean",
          "description" : "is quarantine enabled"
        }
      }
    },
    "CleanupPolicyResourceXO" : {
      "type" : "object",
      "required" : [ "format", "name" ],
      "properties" : {
        "notes" : {
          "type" : "string",
          "description" : "description"
        },
        "criteriaLastBlobUpdated" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "component age (Components published over “x” days ago (e.g 1-999))"
        },
        "criteriaLastDownloaded" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "component usage (Components downloaded in “x” amount of days (e.g 1-999))"
        },
        "criteriaReleaseType" : {
          "type" : "string",
          "description" : "release type (Remove components that are of the following release type:)",
          "enum" : [ "RELEASES", "PRERELEASES", "RELEASES_AND_PRERELEASES" ]
        },
        "criteriaAssetRegex" : {
          "type" : "string",
          "description" : "asset name matcher (Remove components that have at least one asset name matching the following regular expression pattern:)"
        },
        "retain" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "keep the latest \"x\" number of versions",
          "minimum" : 1
        },
        "name" : {
          "type" : "string",
          "description" : "policy name",
          "minLength" : 0,
          "maxLength" : 255,
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "format" : {
          "type" : "string",
          "description" : "repository format"
        }
      }
    },
    "PageReconcilePlanDetailsXO" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ReconcilePlanDetailsXO"
          }
        },
        "continuationToken" : {
          "type" : "string"
        }
      }
    },
    "ReconcilePlanDetailsXO" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int32"
        },
        "planId" : {
          "type" : "integer",
          "format" : "int32"
        },
        "blobId" : {
          "type" : "string"
        },
        "repository" : {
          "type" : "string"
        },
        "datePathRef" : {
          "type" : "string"
        },
        "path" : {
          "type" : "string"
        },
        "action" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string"
        },
        "reason" : {
          "type" : "string"
        },
        "assetName" : {
          "type" : "string"
        }
      }
    },
    "ReconcilePlanWithDetailsXO" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int32"
        },
        "repository" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time"
        },
        "configuration" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "details" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ReconcilePlanDetailsXO"
          }
        },
        "continuationToken" : {
          "type" : "string"
        }
      }
    },
    "PageReconcilePlanXO" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ReconcilePlanXO"
          }
        },
        "continuationToken" : {
          "type" : "string"
        }
      }
    },
    "ReconcilePlanXO" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int32"
        },
        "repository" : {
          "type" : "string"
        },
        "blobStore" : {
          "type" : "string"
        },
        "state" : {
          "type" : "string"
        },
        "started" : {
          "type" : "string",
          "format" : "date-time"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time"
        },
        "configuration" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "CrowdApiXO" : {
      "type" : "object",
      "required" : [ "enabled", "realmActive" ],
      "properties" : {
        "enabled" : {
          "type" : "boolean"
        },
        "realmActive" : {
          "type" : "boolean"
        },
        "applicationName" : {
          "type" : "string"
        },
        "applicationPassword" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        },
        "useTrustStoreForUrl" : {
          "type" : "boolean"
        },
        "timeout" : {
          "type" : "integer",
          "format" : "int32",
          "minimum" : 1,
          "maximum" : 3600
        }
      }
    },
    "ApiClusterDatabaseMigrationResultDTO" : {
      "type" : "object",
      "properties" : {
        "message" : {
          "type" : "string",
          "description" : "Provides a message indicating the current state of the migration"
        },
        "state" : {
          "type" : "string",
          "description" : "Provides the current migration state.",
          "enum" : [ "MIGRATION_NOT_REQUIRED", "MIGRATION_REQUIRED", "MIGRATION_IN_PROGRESS", "MIGRATION_FAILED", "MIGRATION_FAILED_RETRYABLE", "MIGRATION_SUCCEED" ]
        }
      }
    },
    "ApiLicenseDetailsXO" : {
      "type" : "object",
      "properties" : {
        "contactEmail" : {
          "type" : "string"
        },
        "contactCompany" : {
          "type" : "string"
        },
        "contactName" : {
          "type" : "string"
        },
        "effectiveDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "expirationDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "licenseType" : {
          "type" : "string"
        },
        "licensedUsers" : {
          "type" : "string"
        },
        "fingerprint" : {
          "type" : "string"
        },
        "features" : {
          "type" : "string"
        },
        "maxRepoComponents" : {
          "type" : "integer",
          "format" : "int64"
        },
        "maxRepoRequests" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "InputStream" : {
      "type" : "object"
    },
    "DataStoreApiXO" : {
      "type" : "object",
      "required" : [ "jdbcUrl" ],
      "properties" : {
        "source" : {
          "type" : "string",
          "description" : "The source of the data store.",
          "enum" : [ "local" ]
        },
        "type" : {
          "type" : "string",
          "description" : "The type of the data store.",
          "enum" : [ "jdbc" ]
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the data store."
        },
        "jdbcUrl" : {
          "type" : "string",
          "description" : "The JDBC connection URL for the data store."
        },
        "username" : {
          "type" : "string",
          "description" : "The username to use for the JDBC connection."
        },
        "schema" : {
          "type" : "string"
        },
        "advanced" : {
          "type" : "string"
        }
      }
    },
    "DataStoreApiUpdateXO" : {
      "type" : "object",
      "required" : [ "jdbcUrl" ],
      "properties" : {
        "source" : {
          "type" : "string",
          "description" : "The source of the data store.",
          "enum" : [ "local" ]
        },
        "type" : {
          "type" : "string",
          "description" : "The type of the data store.",
          "enum" : [ "jdbc" ]
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the data store."
        },
        "jdbcUrl" : {
          "type" : "string",
          "description" : "The JDBC connection URL for the data store."
        },
        "username" : {
          "type" : "string",
          "description" : "The username to use for the JDBC connection."
        },
        "schema" : {
          "type" : "string"
        },
        "advanced" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string",
          "description" : "The password to use for the JDBC connection."
        }
      }
    },
    "CargoHostedRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/HostedStorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "component" : {
          "$ref" : "#/definitions/ComponentAttributes"
        }
      }
    },
    "CargoAttributes" : {
      "type" : "object",
      "properties" : {
        "requireAuthentication" : {
          "type" : "boolean",
          "example" : false,
          "description" : "Indicates if this repository requires authentication overriding anonymous access."
        }
      }
    },
    "CargoProxyApiRepository" : {
      "type" : "object",
      "required" : [ "httpClient", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRuleName" : {
          "type" : "string",
          "description" : "The name of the routing rule assigned to this repository"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        },
        "cargo" : {
          "$ref" : "#/definitions/CargoAttributes"
        }
      }
    },
    "CargoProxyRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "httpClient", "name", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRule" : {
          "type" : "string"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        },
        "cargo" : {
          "$ref" : "#/definitions/CargoAttributes"
        }
      }
    },
    "CargoGroupApiRepository" : {
      "type" : "object",
      "required" : [ "group", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "group" : {
          "$ref" : "#/definitions/GroupDeployAttributes"
        },
        "cargo" : {
          "$ref" : "#/definitions/CargoAttributes"
        }
      }
    },
    "CargoGroupRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "group", "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "group" : {
          "$ref" : "#/definitions/GroupAttributes"
        },
        "cargo" : {
          "$ref" : "#/definitions/CargoAttributes"
        }
      }
    },
    "CocoapodsProxyRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "httpClient", "name", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRule" : {
          "type" : "string"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        }
      }
    },
    "ComposerProxyRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "httpClient", "name", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRule" : {
          "type" : "string"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        }
      }
    },
    "ConanProxyAttributes" : {
      "type" : "object",
      "properties" : {
        "conanVersion" : {
          "type" : "string",
          "example" : "V1",
          "description" : "Conan protocol version;",
          "enum" : [ "V1", "V2" ]
        }
      }
    },
    "ConanProxyRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "httpClient", "name", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRule" : {
          "type" : "string"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        },
        "conanProxy" : {
          "$ref" : "#/definitions/ConanProxyAttributes"
        }
      }
    },
    "ConanGroupRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "group", "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "group" : {
          "$ref" : "#/definitions/GroupDeployAttributes"
        }
      }
    },
    "ConanHostedRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/HostedStorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "component" : {
          "$ref" : "#/definitions/ComponentAttributes"
        }
      }
    },
    "CondaProxyRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "httpClient", "name", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRule" : {
          "type" : "string"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        }
      }
    },
    "GolangGroupRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "group", "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "group" : {
          "$ref" : "#/definitions/GroupAttributes"
        }
      }
    },
    "GolangProxyRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "httpClient", "name", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRule" : {
          "type" : "string"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        }
      }
    },
    "HelmProxyRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "httpClient", "name", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRule" : {
          "type" : "string"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        }
      }
    },
    "HelmHostedRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/HostedStorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "component" : {
          "$ref" : "#/definitions/ComponentAttributes"
        }
      }
    },
    "HuggingFaceProxyRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "httpClient", "name", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRule" : {
          "type" : "string"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        }
      }
    },
    "NpmHostedRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/HostedStorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "component" : {
          "$ref" : "#/definitions/ComponentAttributes"
        }
      }
    },
    "NpmAttributes" : {
      "type" : "object",
      "required" : [ "removeQuarantined" ],
      "properties" : {
        "removeQuarantined" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Remove Quarantined Versions"
        }
      }
    },
    "NpmProxyApiRepository" : {
      "type" : "object",
      "required" : [ "httpClient", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRuleName" : {
          "type" : "string",
          "description" : "The name of the routing rule assigned to this repository"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        },
        "npm" : {
          "$ref" : "#/definitions/NpmAttributes"
        }
      }
    },
    "NpmProxyRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "httpClient", "name", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRule" : {
          "type" : "string"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        },
        "npm" : {
          "$ref" : "#/definitions/NpmAttributes"
        }
      }
    },
    "SimpleApiGroupDeployRepository" : {
      "type" : "object",
      "required" : [ "group", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "readOnly" : true,
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests",
          "readOnly" : true
        },
        "storage" : {
          "readOnly" : true,
          "$ref" : "#/definitions/StorageAttributes"
        },
        "group" : {
          "readOnly" : true,
          "$ref" : "#/definitions/GroupDeployAttributes"
        }
      }
    },
    "NpmGroupRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "group", "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "group" : {
          "$ref" : "#/definitions/GroupDeployAttributes"
        }
      }
    },
    "NugetGroupRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "group", "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "group" : {
          "$ref" : "#/definitions/GroupAttributes"
        }
      }
    },
    "NugetHostedRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/HostedStorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "component" : {
          "$ref" : "#/definitions/ComponentAttributes"
        }
      }
    },
    "NugetAttributes" : {
      "type" : "object",
      "properties" : {
        "queryCacheItemMaxAge" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 3600,
          "description" : "How long to cache query results from the proxied repository (in seconds)"
        },
        "nugetVersion" : {
          "type" : "string",
          "example" : "V3",
          "description" : "Nuget protocol version",
          "enum" : [ "V2", "V3" ]
        }
      }
    },
    "NugetProxyApiRepository" : {
      "type" : "object",
      "required" : [ "httpClient", "negativeCache", "nugetProxy", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRuleName" : {
          "type" : "string",
          "description" : "The name of the routing rule assigned to this repository"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        },
        "nugetProxy" : {
          "$ref" : "#/definitions/NugetAttributes"
        }
      }
    },
    "NugetProxyRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "httpClient", "name", "negativeCache", "nugetProxy", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRule" : {
          "type" : "string"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        },
        "nugetProxy" : {
          "$ref" : "#/definitions/NugetAttributes"
        }
      }
    },
    "P2ProxyRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "httpClient", "name", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRule" : {
          "type" : "string"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        }
      }
    },
    "PypiHostedRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/HostedStorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "component" : {
          "$ref" : "#/definitions/ComponentAttributes"
        }
      }
    },
    "PypiGroupRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "group", "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "group" : {
          "$ref" : "#/definitions/GroupAttributes"
        }
      }
    },
    "PyPiProxyAttributes" : {
      "type" : "object",
      "required" : [ "removeQuarantined" ],
      "properties" : {
        "removeQuarantined" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Remove Quarantined Versions"
        }
      }
    },
    "PypiProxyRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "httpClient", "name", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRule" : {
          "type" : "string"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        },
        "pypi" : {
          "$ref" : "#/definitions/PyPiProxyAttributes"
        }
      }
    },
    "RProxyRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "httpClient", "name", "negativeCache", "online", "proxy", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "proxy" : {
          "$ref" : "#/definitions/ProxyAttributes"
        },
        "negativeCache" : {
          "$ref" : "#/definitions/NegativeCacheAttributes"
        },
        "httpClient" : {
          "$ref" : "#/definitions/HttpClientAttributes"
        },
        "routingRule" : {
          "type" : "string"
        },
        "replication" : {
          "$ref" : "#/definitions/ReplicationAttributes"
        }
      }
    },
    "RGroupRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "group", "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/StorageAttributes"
        },
        "group" : {
          "$ref" : "#/definitions/GroupAttributes"
        }
      }
    },
    "RHostedRepositoryApiRequest" : {
      "type" : "object",
      "required" : [ "name", "online", "storage" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "internal",
          "description" : "A unique identifier for this repository",
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "online" : {
          "type" : "boolean",
          "example" : true,
          "description" : "Whether this repository accepts incoming requests"
        },
        "storage" : {
          "$ref" : "#/definitions/HostedStorageAttributes"
        },
        "cleanup" : {
          "$ref" : "#/definitions/CleanupPolicyAttributes"
        },
        "component" : {
          "$ref" : "#/definitions/ComponentAttributes"
        }
      }
    },
    "SamlConfigurationXO" : {
      "type" : "object",
      "required" : [ "idpMetadata", "usernameAttribute" ],
      "properties" : {
        "entityId" : {
          "type" : "string",
          "description" : "SAML Service Provider's unique identifying URI"
        },
        "idpMetadata" : {
          "type" : "string",
          "description" : "SAML Identity Provider Metadata XML"
        },
        "usernameAttribute" : {
          "type" : "string",
          "description" : "SAML attribute name for the username"
        },
        "firstNameAttribute" : {
          "type" : "string",
          "description" : "SAML attribute name for the first name"
        },
        "lastNameAttribute" : {
          "type" : "string",
          "description" : "SAML attribute name for the last name"
        },
        "emailAttribute" : {
          "type" : "string",
          "description" : "SAML attribute name for email"
        },
        "groupsAttribute" : {
          "type" : "string",
          "description" : "SAML attribute name for groups which maps the Identity Provider groups to a Nexus Repository Manager role"
        },
        "validateResponseSignature" : {
          "type" : "boolean",
          "description" : "Validate signatures on responses from Identity Provider"
        },
        "validateAssertionSignature" : {
          "type" : "boolean",
          "description" : "Validate signatures on assertions from Identity Provider"
        }
      }
    },
    "TagXO" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "minLength" : 1,
          "maxLength" : 256,
          "pattern" : "^[a-zA-Z0-9\\-]{1}[a-zA-Z0-9_\\-\\.]*$"
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        },
        "firstCreated" : {
          "type" : "string",
          "format" : "date-time"
        },
        "lastUpdated" : {
          "type" : "string",
          "format" : "date-time"
        }
      }
    },
    "BaseTagXO" : {
      "type" : "object",
      "properties" : {
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          }
        }
      }
    },
    "PageTagXO" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/TagXO"
          }
        },
        "continuationToken" : {
          "type" : "string"
        }
      }
    },
    "UserTokensApiModel" : {
      "type" : "object",
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "description" : "Whether or not User Tokens feature is enabled"
        },
        "protectContent" : {
          "type" : "boolean",
          "description" : "Additionally require user tokens for repository authentication"
        },
        "expirationEnabled" : {
          "type" : "boolean",
          "description" : "Enable user tokens expiration"
        },
        "expirationDays" : {
          "type" : "integer",
          "format" : "int32",
          "example" : 30,
          "description" : "Set user token expiration days (E.g., 1-999)",
          "minimum" : 1,
          "maximum" : 999
        }
      }
    },
    "AzureBlobStoreApiAuthentication" : {
      "type" : "object",
      "required" : [ "authenticationMethod" ],
      "properties" : {
        "authenticationMethod" : {
          "type" : "string",
          "description" : "The type of Azure authentication to use.",
          "enum" : [ "ACCOUNTKEY", "MANAGEDIDENTITY", "ENVIRONMENTVARIABLE" ]
        },
        "accountKey" : {
          "type" : "string",
          "description" : "The account key."
        }
      }
    },
    "AzureBlobStoreApiBucketConfiguration" : {
      "type" : "object",
      "required" : [ "accountName", "authentication", "containerName" ],
      "properties" : {
        "accountName" : {
          "type" : "string",
          "description" : "Account name found under Access keys for the storage account."
        },
        "containerName" : {
          "type" : "string",
          "description" : "The name of an existing container to be used for storage.",
          "pattern" : "^[a-z0-9][a-z0-9-]{2,62}$"
        },
        "authentication" : {
          "description" : "The Azure specific authentication details.",
          "$ref" : "#/definitions/AzureBlobStoreApiAuthentication"
        }
      }
    },
    "AzureBlobStoreApiModel" : {
      "type" : "object",
      "required" : [ "bucketConfiguration", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the Azure blob store."
        },
        "softQuota" : {
          "description" : "Settings to control the soft quota.",
          "$ref" : "#/definitions/BlobStoreApiSoftQuota"
        },
        "bucketConfiguration" : {
          "description" : "The Azure specific configuration details for the Azure object that'll contain the blob store.",
          "$ref" : "#/definitions/AzureBlobStoreApiBucketConfiguration"
        }
      }
    },
    "AzureConnectionXO" : {
      "type" : "object",
      "properties" : {
        "accountName" : {
          "type" : "string"
        },
        "accountKey" : {
          "type" : "string"
        },
        "containerName" : {
          "type" : "string"
        },
        "authenticationMethod" : {
          "type" : "string"
        }
      }
    },
    "MaliciousRiskOnDiskCountResponse" : {
      "type" : "object",
      "properties" : {
        "totalCount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "hdsExceptionThrown" : {
          "type" : "boolean"
        }
      }
    },
    "CapabilityDTO" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "notes" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean"
        },
        "properties" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "GoogleCloudBlobStoreApiBucket" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the GC Storage bucket"
        },
        "projectId" : {
          "type" : "string",
          "example" : "project_123",
          "description" : "GCP Project ID",
          "readOnly" : true
        },
        "region" : {
          "type" : "string",
          "example" : "us-central1",
          "description" : "The GCP region to create a new GC Storage bucket in or an existing GC Storage bucket's region. Should be the same as Nexus deployment region."
        },
        "prefix" : {
          "type" : "string",
          "description" : "The GC Storage blob store (i.e GC Storage object) key prefix",
          "readOnly" : true
        }
      }
    },
    "GoogleCloudBlobStoreApiBucketAuthentication" : {
      "type" : "object",
      "required" : [ "authenticationMethod" ],
      "properties" : {
        "authenticationMethod" : {
          "type" : "string",
          "description" : "The type of Google Cloud authentication to use.",
          "enum" : [ "applicationDefault", "accountKey" ]
        },
        "accountKey" : {
          "type" : "string",
          "description" : "The credentials JSON file."
        }
      }
    },
    "GoogleCloudBlobStoreApiBucketConfiguration" : {
      "type" : "object",
      "required" : [ "bucket" ],
      "properties" : {
        "bucket" : {
          "description" : "Details of the GC Storage bucket such as name and region",
          "readOnly" : true,
          "$ref" : "#/definitions/GoogleCloudBlobStoreApiBucket"
        },
        "encryption" : {
          "description" : "The type of encryption to use",
          "readOnly" : true,
          "$ref" : "#/definitions/GoogleCloudBlobStoreApiEncryption"
        },
        "bucketSecurity" : {
          "description" : "Security details for granting access the GC Storage API",
          "$ref" : "#/definitions/GoogleCloudBlobStoreApiBucketAuthentication"
        }
      }
    },
    "GoogleCloudBlobStoreApiEncryption" : {
      "type" : "object",
      "properties" : {
        "encryptionType" : {
          "type" : "string",
          "description" : "The type of GCP server side encryption to use.",
          "enum" : [ "default", "kmsManagedEncryption" ]
        },
        "encryptionKey" : {
          "type" : "string",
          "description" : "CryptoKey ID for KMS encryption."
        }
      }
    },
    "GoogleCloudBlobstoreApiModel" : {
      "type" : "object",
      "required" : [ "bucketConfiguration", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "gc_storage",
          "description" : "The name of the GC Storage blob store."
        },
        "softQuota" : {
          "description" : "Settings to control the soft quota.",
          "$ref" : "#/definitions/BlobStoreApiSoftQuota"
        },
        "bucketConfiguration" : {
          "description" : "The GC Storage specific configuration details for the GC Storage object that'll contain the blob store.",
          "$ref" : "#/definitions/GoogleCloudBlobStoreApiBucketConfiguration"
        },
        "type" : {
          "type" : "string",
          "example" : "Google Cloud Storage",
          "description" : "The blob store type.",
          "readOnly" : true
        }
      }
    },
    "IqConnectionXo" : {
      "type" : "object",
      "required" : [ "authenticationType" ],
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "description" : "Whether to use Sonatype Repository Firewall"
        },
        "showLink" : {
          "type" : "boolean",
          "description" : "Show Sonatype Repository Firewall link in Browse menu when server is enabled"
        },
        "url" : {
          "type" : "string",
          "description" : "The address of your Sonatype Repository Firewall"
        },
        "authenticationType" : {
          "type" : "string",
          "description" : "Authentication method",
          "enum" : [ "USER", "PKI" ]
        },
        "username" : {
          "type" : "string",
          "description" : "User with access to Sonatype Repository Firewall"
        },
        "password" : {
          "type" : "string",
          "description" : "Credentials for the Sonatype Repository Firewall User"
        },
        "useTrustStoreForUrl" : {
          "type" : "boolean",
          "description" : "Use certificates stored in the Nexus Repository Manager truststore to connect to Sonatype Repository Firewall"
        },
        "timeoutSeconds" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Seconds to wait for activity before stopping and retrying the connection. Leave blank to use the globally defined HTTP timeout.",
          "minimum" : 1,
          "maximum" : 3600
        },
        "properties" : {
          "type" : "string",
          "description" : "Additional properties to configure for Sonatype Repository Firewall"
        },
        "failOpenModeEnabled" : {
          "type" : "boolean",
          "description" : "Allow by default when quarantine is enabled and the IQ connection fails"
        }
      }
    },
    "IqConnectionVerificationXo" : {
      "type" : "object",
      "properties" : {
        "success" : {
          "type" : "boolean"
        },
        "reason" : {
          "type" : "string"
        }
      }
    },
    "AuthSettingsXo" : {
      "type" : "object",
      "required" : [ "enabled", "ntlmDomain", "ntlmHost", "password", "username" ],
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "description" : "auth enabled"
        },
        "username" : {
          "type" : "string",
          "description" : "user name"
        },
        "password" : {
          "type" : "string",
          "description" : "user password"
        },
        "ntlmHost" : {
          "type" : "string",
          "description" : "Windows NTLM Hostname"
        },
        "ntlmDomain" : {
          "type" : "string",
          "description" : "Windows NTLM Domain"
        }
      }
    },
    "HttpSettingsXo" : {
      "type" : "object",
      "required" : [ "httpProxy", "httpsProxy", "retries", "timeout", "userAgent" ],
      "properties" : {
        "nonProxyHosts" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "userAgent" : {
          "type" : "string",
          "description" : "User-Agent Customization"
        },
        "timeout" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Connection/Socket Timeout",
          "minimum" : 1,
          "maximum" : 3600
        },
        "retries" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Connection/Socket Retry Attempts",
          "minimum" : 0,
          "maximum" : 10
        },
        "httpProxy" : {
          "$ref" : "#/definitions/ProxySettingsXo"
        },
        "httpsProxy" : {
          "$ref" : "#/definitions/ProxySettingsXo"
        }
      }
    },
    "ProxySettingsXo" : {
      "type" : "object",
      "required" : [ "authInfo", "enabled", "host", "port" ],
      "properties" : {
        "enabled" : {
          "type" : "boolean",
          "description" : "proxy enabled"
        },
        "host" : {
          "type" : "string",
          "description" : "proxy host"
        },
        "port" : {
          "type" : "string",
          "description" : "proxy port"
        },
        "authInfo" : {
          "$ref" : "#/definitions/AuthSettingsXo"
        }
      }
    },
    "ApiCertificate" : {
      "type" : "object",
      "properties" : {
        "expiresOn" : {
          "type" : "integer",
          "format" : "int64"
        },
        "fingerprint" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "issuedOn" : {
          "type" : "integer",
          "format" : "int64"
        },
        "issuerCommonName" : {
          "type" : "string"
        },
        "issuerOrganization" : {
          "type" : "string"
        },
        "issuerOrganizationalUnit" : {
          "type" : "string"
        },
        "pem" : {
          "type" : "string"
        },
        "serialNumber" : {
          "type" : "string"
        },
        "subjectCommonName" : {
          "type" : "string"
        },
        "subjectOrganization" : {
          "type" : "string"
        },
        "subjectOrganizationalUnit" : {
          "type" : "string"
        }
      }
    },
    "GroupBlobStoreApiCreateRequest" : {
      "type" : "object",
      "properties" : {
        "softQuota" : {
          "description" : "Settings to control the soft quota",
          "$ref" : "#/definitions/BlobStoreApiSoftQuota"
        },
        "members" : {
          "type" : "array",
          "description" : "List of the names of blob stores that are members of this group",
          "items" : {
            "type" : "string"
          }
        },
        "fillPolicy" : {
          "type" : "string",
          "enum" : [ "roundRobin", "writeToFirst" ]
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "GroupBlobStoreApiUpdateRequest" : {
      "type" : "object",
      "properties" : {
        "softQuota" : {
          "description" : "Settings to control the soft quota",
          "$ref" : "#/definitions/BlobStoreApiSoftQuota"
        },
        "members" : {
          "type" : "array",
          "description" : "List of the names of blob stores that are members of this group",
          "items" : {
            "type" : "string"
          }
        },
        "fillPolicy" : {
          "type" : "string",
          "enum" : [ "roundRobin", "writeToFirst" ]
        }
      }
    },
    "GroupBlobStoreApiModel" : {
      "type" : "object",
      "properties" : {
        "softQuota" : {
          "description" : "Settings to control the soft quota",
          "$ref" : "#/definitions/BlobStoreApiSoftQuota"
        },
        "members" : {
          "type" : "array",
          "description" : "List of the names of blob stores that are members of this group",
          "items" : {
            "type" : "string"
          }
        },
        "fillPolicy" : {
          "type" : "string",
          "enum" : [ "roundRobin", "writeToFirst" ]
        }
      }
    },
    "GroupBlobStoreApiResponse" : {
      "type" : "object",
      "properties" : {
        "softQuota" : {
          "description" : "Settings to control the soft quota",
          "$ref" : "#/definitions/BlobStoreApiSoftQuota"
        },
        "members" : {
          "type" : "array",
          "description" : "List of the names of blob stores that are members of this group",
          "items" : {
            "type" : "string"
          }
        },
        "fillPolicy" : {
          "type" : "string",
          "enum" : [ "roundRobin", "writeToFirst" ]
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "SystemCheckResultDTO" : {
      "type" : "object",
      "properties" : {
        "healthy" : {
          "type" : "boolean",
          "description" : "Whether the system check succeeded of failed"
        },
        "message" : {
          "type" : "string",
          "description" : "A description of the success or failure"
        }
      }
    },
    "SystemCheckResultsApiDTO" : {
      "type" : "object",
      "properties" : {
        "nodeId" : {
          "type" : "string",
          "description" : "A unique identifier for the node, should not be considered stable"
        },
        "hostname" : {
          "type" : "string",
          "example" : "nexus01",
          "description" : "The hostname of the originating node"
        },
        "results" : {
          "type" : "object",
          "example" : "{\"Check\": {\"healthy\": false, \"message\": \"An explanation of the check\"}}",
          "description" : "The system status check results",
          "additionalProperties" : {
            "$ref" : "#/definitions/SystemCheckResultDTO"
          }
        }
      }
    }
  }
}